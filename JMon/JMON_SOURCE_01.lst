---------------------------------------------
Z80 ASSEMBLER LISTING
Line   Addr Opcode      Label   Instruction
---------------------------------------------
0001   0000             ;
0002   0000             ;JMON - JIM'S MONITOR
0003   0000             ;BY JIM ROBERTSON
0004   0000             ;
0005   0000             ;
0006   0000             ;FILENAME : JMON_SOURCE_01.ASM
0007   0000             ;VERSION : 1
0008   0000             ;
0009   0000             ;This version has been cleaned up by Mark Jelic, June 2021
0010   0000             ;[Lovingly] RESTORED TO SOURCE FROM PDF LISTING(S) FEBRUARY 2021
0011   0000             ;[by Craig Jones. What a champion effort! - MJ]
0012   0000             ;
0013   0000             ;THE PHOTOCOPIED PDF LISTING WAS CONVERTED TO A TEXT FILE VIA OCR
0014   0000             ;THE MISSING PAGE 9 WAS TAKEN FROM ANOTHER VERSION OF THE LISTING
0015   0000             ;PAGE NUMBERS REFER TO THE PHOTOCOPIED LISTING PDF FILE
0016   0000             ;
0017   0000             ;
0018   0000             ;<PAGE 23> KEYBOARD READER/VALIDATER CONDITIONAL ASSEMBLY
0019   0000             ;JMON USES BIT 6 OF THE LATCH ON THE DAT BOARD TO READ THE INVERTED DA
0020   0000             ;FROM THE KEYBOARD ENCODER
0021   0000             ;THE CONDITIONAL ASSEMBLY ALLOWS FOR THE ACTIVE HIGH DA SIGNAL TO
0022   0000             ;BE CONNECTED DIRECTLY TO D6 (VIA A TRI-STATE BUFFER) AT THE KEYBOARD I/O ADDRESS
0023   0000             ;
0024   0000             ;KEYBOARD ENCODER DA (DATA AVAILABLE) IS ACTIVE HIGH
0025   0000             ;#DEFINE DA_ACTIVE_HIGH
0026   0000             ;KEYBOARD ENCODER DA CONNECTED TO KEYBOARD INPUT PORT DATA BIT 6
0027   0000             ;#DEFINE DA_KEYBOARD
0028   0000             ;
0029   0000             ;GLOSSARY
0030   0000             ;
0031   0000             ;CURRENT EDITING LOCATION (082E)
0032   0000             ;THIS IS THE ADDRESS THAT IS USUALLY DISPLAYED IN THE ADDRESS SECTION ON THE TEC LED
0033   0000             ;DISPLAY. IT IS THE ADDRESS THAT IS SUBJECT TO MODIFICATION BY JMON.
0034   0000             ;
0035   0000             ;MONITOR CONTROL BYTE (MCB) (082B)
0036   0000             ;THIS BYTE CONTAINS THE INFORMATION OF THE CURRENT WORKING STATE OF JMON. THE INFORMATION
0037   0000             ;HELD IN THIS BYTE IS:
0038   0000             ;1 - THE CURRENT MODE OF JMON.
0039   0000             ;E.G. DATA, ADDRESS OR FUNCTION (NOT SHIFT AS SHIFT IS TESTED AND HANDLED DURING THE DATA
0040   0000             ;KEY HANDLER ROUTINE). BITS 4 AND 5 ENCODE THE CURRENT MODE IN THE FOLLOWING WAY. BOTH
0041   0000             ;BITS ARE LOW FOR THE DATA MODE, BIT 4 IS HIGH FOR THE ADDRESS MODE, BITS 4 AND 5 ARE HIGH
0042   0000             ;FOR THE FUNCTION MODE. BIT 4 IS CALLED THE ADDRESS/FUNCTION BIT As THE SOFTWARE ONLY
0043   0000             ;NEEDS TO TEST THIS BIT TO FIND IF EITHER THE ADDRESS OR FUNCTION MODE IS ACTIVE. BIT 5
0044   0000             ;IS THE FUNCTION MODE ENABLED BIT.
0045   0000             ;2 - THE NUMBER OF THE CURRENT FUNCTION I.E. 1,2 OR 3.
0046   0000             ;THIS IS ENCODED IN BITS 2 AND 3. IF NO FUNCTION OR FUNCTION-1 IS ENABLED THEN BOTH BITS
0047   0000             ;ARE LOW. IF FUNCTION-2 IS SELECTED THEN BIT 2 IS HIGH AND BIT 3 IS LOW. IF FUNCTION-3 IS
0048   0000             ;SELECTED THEN BIT 3 IS HIGH AND BIT 2 IS LOW.
0049   0000             ;3 - THE NUMBER OF NIBBLES ENTERED
0050   0000             ;THIS IS ENCODED IN BITS 0 AND 1. IF NO NIBBLES HAVE BEEN ENTERED IN THE CURRENT EDITING
0051   0000             ;LOCATION THEN BOTH BIT ARE LOW. IF ONE NIBBLE HAS BEEN ENTERED THEN BIT 0 IS HIGH AND
0052   0000             ;BIT 1 IS LOW IS TWO NIBBLES HAVE BEEN ENTERED THEN BIT 0 IS LOW AND BIT 1 IS HIGH. JMON
0053   0000             ;USES THESE BITS WHEN DECIDING ON THE AUTO-INCREMENT FEATURE. BITS 6 AND 7 ARE NOT USED.
0054   0000             ;
0055   0000             ;DISPLAY BUFFER ADDRESS - (082C/D)
0056   0000             ;THE CONTENTS OF 082C/D POINTS TO THE LOCATION IN MEMORY OF THE 6 BYTE DISPLAY BUFFER
0057   0000             ;(0800 FOR JMON AND 0806 FOR THE STEPPER). THE DISPLAY BUFFER ADDRESS POINTS TO THE LOWEST
0058   0000             ;ADDRESS OF THE DISPLAY BUFFER WHICH CONTAINS THE LOW ORDER DATA DISPLAY BYTE.
0059   0000             ;
0060   0000             ;KEY PLANT
0061   0000             ;THE KEY PLANT IS A FAKE KEY STROKE THAT MAY BE GENERATED BY THE "DURING SCAN/REY LOOP"
0062   0000             ;USER PATCH. THE PLANT ALLOWS JMON'S MONITOR FUNCTIONS TO BE SOFTWARE CONTROLLED E.G. YOU
0063   0000             ;MAY WISH TO VIEW THE CONTENTS ,OF MEMORY BYTE BY BYTE. WITH THE KEY PLANT YOU CAN SET JMON
0064   0000             ;UP TO AUTOMATICALLY INCREMENT THE CURRENT EDIT LOCATION EVERY FEW SECONDS.
0065   0000             ;THE PLANT IS IDENTIFIED BY THE USER PATCH STORING THE REQUIRED KEY VALUE IN, AND SETTING
0066   0000             ;BIT 7 OF THE INPUT KEY BUFFER (0820).
0067   0000             ;
0068   0000             ;AUTO KEY STATUS BYTE (082A)
0069   0000             ;THIS BYTE HOLDS THE INFORMATION REQUIRED FOR THE AUTO KEY REPEAT SECTION. THE INFORMATION
0070   0000             ;HELD IN THIS BYTE IS EITHER ONE OF THE FOLLOWING:
0071   0000             ;A "NEXT KEY DETECTION WILL BE A FIRST DETECTION" SO JMON WILL PROCESS THE KEY IMMEDIATELY
0072   0000             ;(BIT 7 HIGH) . A TIMER (BITS 0-6) THAT COUNTS, A DELAY FOR THE AUTO. REPEAT TIMING.
0073   0000             ;
0074   0000             ;KEY PRESS FLAG (0825)
0075   0000             ;THIS FLAG IS USED TO REMEMBER IF THE ONE KEY PRESS HAS ALREADY BEEN DETECTED AND PROCESSED.
0076   0000             ;THIS PREVENTS THE SAME KEY BEING PROCESSED EACH TIME THE SOFTWARE FINDS THAT IT IS PUSHED.
0077   0000             ;THIS IS THE WAY IT WORKS:
0078   0000             ;THE KEY PRESS FLAG 1S ZEROED BY THE JMON DEFAULT VARIABLES AND THIS FLAGS A "NO KEY
0079   0000             ;PRESSED" STATE. WHEN A KEY IS DETECTED THEN THIS FLAG IS TESTED AND IF ZERO THEN THE KEY
0080   0000             ;IS ACCEPTED AS A FIRST KEY PRESS. IN THIS CASE THE KEY PRESS FLAG IS THEN SET TO FF TO
0081   0000             ;REMEMBER THAT THE KEY PRESS HAS BEEN DETECTED. IF A KEY IS DETECTED AND THIS FLAG BYTE
0082   0000             ;IS NOT ZERO, THEN THE KEY IS IGNORED. WHEN THE SOFTWARE FINDS THAT NO KEY IS BEING PRESSED,
0083   0000             ;THEN THIS FLAG IS CLEARED TO ALLOW THE NEXT KEY PRESS DETECTED TO BE PROCESSED.
0084   0000             ;THIS FLAG IS USED BY THE RST 08, RST 10 RST 18 AND RST 20 KEYBOARD ROUTINES AS DESCRIBED
0085   0000             ;IN ISSUE 15 TALKING ELECTRONICS AND ALSO THE STEPPER SOFTWARE.
0086   0000             ;THE AUTO KEY REPEAT ROUTINE DOES NOT USE THIS FLAG BYTE, DO NOT CONFUSE THIS FLAG WITH
0087   0000             ;THE AUTO KEY STATUS BYTE WHICH IS USED BY THE AUTO KEY REPEAT SECTION.
0088   0000             
0089   0000             ;TAPE FILE INFORMATION BLOCK
0090   0000             ;THIS IS A 12 BYTE BLOCK THAT CONTAINS THE FOLLOWING INFORMATION:
0091   0000             ;THE START ADDRESS OF THE BLOCK, THE NUMBER OF BYTES IN THE BLOCK, THE FILE NUMBER AND AN
0092   0000             ;OPTIONAL GO ADDRESS OR FFFF IF OPTIONAL GO IS DISABLED. THE OTHER 4 BYTES ARE NOT USED
0093   0000             ;AT THIS STAGE.
0094   0000             ;THIS BLOCK IS OUTPUTTED AND INPUTTED TO AND FROM THE TAPE ON EACH TAPE OPERATION.
0095   0000             ;
0096   0000             ;"NEXT PC" BUFFER
0097   0000             ;THIS IS A TEMPORARY PLACE TO SAVE THE RETURN ADDRESS WHICH IS THEN USED AS THE ACTUAL PC
0098   0000             ;VALUE FOR THE NEXT INSTRUCTION STEPPED.
0099   0000             ;
0100   0000             ;FORCED HARD RESET
0101   0000             ;THIS IS ACHIEVED BY HOLDING DOWN A KEY WHEN RELEASING THE RESET. THE HARD RESET CAUSES
0102   0000             ;JMON TO RE-BOOT ITS VARIABLES AND ALSO MASK OFF ALL THE USER PATCHES (EXCEPT THE RESET
0103   0000             ;PATCH). THE MAIN PURPOSE OF A FORCED HARD RESET IS TO RECOVER THE TEC IF A USER PATCH
0104   0000             ;ENTERS A CONTINUOUS LOOP.
0105   0000             ;
0106   0000             
0107   0000             L0792:		EQU		0792h								;BASE OF REGISTER NAME TABLE
0108   0000             L0800:		EQU		0800h								;Current displayed Address Buffer
0109   0000             L0804:		EQU		0804H								;Current displayed Data Buffer
0110   0000             L0805:		EQU		0805H								;Character #2 of the Data Display Buffer
0111   0000             L0806:		EQU		0806h								;Stepper's 6 Byte Display Buffer
0112   0000             L0820:		EQU		0820H								;KEY BUFFER
0113   0000             L0821:		EQU		0821H								;LCD ON/OFF FLAG
0114   0000             L0822:		EQU		0822H								;SOUND ON/OFF
0115   0000             L0823:		EQU		0823H								;GO AT ALTERNATE GO ADDRESS IF AA
0116   0000             L0824:		EQU		0824H								;STEPPER KEY CONTROL/TIMER
0117   0000             L0825:		EQU		0825H								;KEY PRESS FLAG
0118   0000             L0826:		EQU		0826H								;UNUSED
0119   0000             L0827:		EQU		0827H								;AUTO INCREMENT ON/OFF
0120   0000             L0828:		EQU		0828H								;ALT GO ADDR/SOFT RESET EDIT LOCATION
0121   0000             L082A:		EQU		082AH								;AUTO KEY STATUS BYTE
0122   0000             L082B:		EQU		082BH								;MONITOR CONTROL BYTE (MCB)
0123   0000             L082C:		EQU		082CH								;DISPLAY BUFFER ADDRESS (using 7seg Display codes)
0124   0000             L082E:		EQU		082EH								;CURRENT EDITING LOCATION (CEL)
0125   0000             
0126   0000             ;The following are the JUMP addresses that a CALLED by JMON,
0127   0000             ;after they are copied from the ROM (starting @ 071Fh) to the RAM @ 0830h, on a Hard Reset.
0128   0000             ;They point back to routines in the ROM, so not sure why this was done.
0129   0000             L0830:		EQU		0830H								;CONVERT HL TO DISPLAY CODE @ 01D5h
0130   0000             L0833:		EQU		0833H								;CONVERT A TO DISPLAY CODE @ 01DAh
0131   0000             L0836:		EQU		0836H								;LED SCAN ROUTINE @ 01BAh
0132   0000             L0839:		EQU		0839H								;SET LED DOTS @ 01EEh
0133   0000             L083C:		EQU		083CH								;RESET TONES @ 0224h
0134   0000             L083F:		EQU		083FH								;TONE @ 0227h
0135   0000             L0842:		EQU		0842H								;SCAN/KEY/LCD/PATCH LOOP @ 0181h
0136   0000             L0845:		EQU		0845h								;SOFT JMON ENTRY L0845 @ 00B2h
0137   0000             L0848:		EQU		0848H								;LCD ROUTINE @ 023Ch
0138   0000             
0139   0000             L084B:		EQU		084BH								;PRE-SCAN USER PATCH
0140   0000             L084E:		EQU		084EH								;USER "DURING LOOP" PATCH
0141   0000             L0851:		EQU		0851H								;USER "AFTER KEY" PATCH
0142   0000             L0858:		EQU		0858H								;ADDRESS OF INSTRUCTION JUST STEPPED
0143   0000             L085A:		EQU		085AH								;CURRENT REG No. BUFFER
0144   0000             L0860:		EQU		0860H								;RE-ENTRY ADDRESS BUFFER
0145   0000             L0868:		EQU		0868H								;"NEXT PC" BUFFER
0146   0000             L086A:		EQU		086Ah								;SHIFT 7 ROUTINE START (REG DISPLAY)
0147   0000             L086E:		EQU		086EH								;
0148   0000             L0870:		EQU		0870H								;
0149   0000             L087E:		EQU		087EH								;Stack Pointer Save Buffer
0150   0000             L0882:		EQU		0882H								;
0151   0000             L0884:		EQU		0884H								;
0152   0000             L0886:		EQU		0886H								;
0153   0000             L0887:		EQU		0887H								;
0154   0000             L0888:		EQU		0888H								;
0155   0000             L088A:		EQU		088AH								;
0156   0000             L088C:		EQU		088CH								;Active Window +1
0157   0000             L088F:		EQU		088FH								;
0158   0000             L0891:		EQU		0891H								;
0159   0000             L0893:		EQU		0893H								;
0160   0000             L0895:		EQU		0895H								;
0161   0000             L0897:		EQU		0897H								;
0162   0000             L0898:		EQU		0898H								;
0163   0000             L089A:		EQU		089AH								;
0164   0000             L089C:		EQU		089CH								;
0165   0000             L089E:		EQU		089EH								;
0166   0000             L08A4:		EQU		08A4H								;
0167   0000             L08A6:		EQU		08A6H								;
0168   0000             L08A8:		EQU		08A8H								;
0169   0000             L08AA:		EQU		08AAH								;
0170   0000             L08B0:		equ		08B0H								;
0171   0000             L08B1:		EQU		08B1H								;
0172   0000             L08B3:		EQU		08B3H								;
0173   0000             L08B5:		EQU		08B5h								;Checksum?
0174   0000             L08B6:		EQU		08B6H								;
0175   0000             L08C0:		EQU		08BEh								;User Table -2
0176   0000             L08FF:		EQU		08FFH								;Reset Flag
0177   0000             L3800:		EQU		3800H								;LCD ROUTINES
0178   0000             L381E:		EQU		381Eh								;Start of the Jump Table in the JMON Utilities
0179   0000             
0180   0000             ;IO Port ASSIGNMENTS
0181   0000             KEYBOARD:	EQU		0x00								;KEYBOARD ENCODER
0182   0000             DSCAN:		EQU		0x01								;DISPLAY CATHODE DRIVER LATCH
0183   0000             DSEGMENT:	EQU		0x02								;DISPLAY SEGMENT DRIVER LATCH
0184   0000             
0185   0000             ;DAT BOARD
0186   0000             DATLATCH:	EQU		0x03								;DAT BOARD LATCH
0187   0000             LCDDATA:	EQU		0x84								;LCD DATA REGISTER
0188   0000             LCDINST:	EQU		0X04								;LCD INSTRUCTION REGISTER
0189   0000             
0190   0000             
0191   0000             ;AT THE START OF JMON, HL IS SAVED IN ITS SINGLE STEPPER BUFFER ADD THE SOFT RESET DISPLAY
0192   0000             ;VALUE IS PLACED IN THE CURRENT EDIT LOCATION BUFFER. THE ROUTINE THEN IS CONTINUED AT $0068.
0193   0000             .ORG		$0000
0194   0000 22 6E 08    			LD		(L086E), HL							;SAVE HL PART OF REGISTER SAVE
0195   0003 2A 28 08    			LD		HL, (L0828)							;GET SOFT RESET INITIAL EDIT
0196   0006 18 63       			JR		L006B								;LOCATION AND CONTINUE AT 006B
0197   0008             
0198   0008             ;RST 08 AND RST 10 (CF AND D7)
0199   0008             ;THESE TWO COMBINE TOGETHER TO SIMULATE A HALT INSTRUCTION. THIS IS DONE BY LOOPING UNTIL
0200   0008             ;THE CURRENT (IF ANY) KEY PRESS IS RELEASED (RST 08), AND THEN LOOPING UNTIL A NEW KEY
0201   0008             ;PRESS IS DETECTED (RST 10).
0202   0008             
0203   0008 E7          L0008:		RST		20H									;TEST FOR KEY PRESS
0204   0009 28 FD       			JR		Z, L0008							;LOOP IF KEY PRESSED
0205   000B 00          			NOP											;ELSE
0206   000C 00          			NOP											;MOVE
0207   000D 00          			NOP											;TO
0208   000E 00          			NOP											;NEXT
0209   000F 00          			NOP											;RST
0210   0010 E7          L0010:		RST		20H									;TEST FOR KEY AGAIN
0211   0011 20 FD       			JR		NZ, L0010							;LOOP IF KEY NOT PRESSED
0212   0013 E6 1F       			AND		0x1F								;MASK OFF JUNK BITS
0213   0015 ED 47       			LD		I, A								;STORE IN INTERRUPT REGISTER
0214   0017 C9          			RET											;DONE
0215   0018             
0216   0018             ;RST 18 (DF)AND RST (20)
0217   0018             ;RST 18 CALLS THE LED SCAN ROUTINE ONCE THEN MOVES ON INTO RST 20 THAT THEN CALLS A KEYBOARD
0218   0018             ;READ ROUTINE.
0219   0018             ;THE KEYBOARD MUST BE READ CONTINUOUSLY OVER A PERIOD OF TIME, AS THE DATA AVAILABLE SIGNAL
0220   0018             ;(BIT 6, PORT 3) (USUALLY) PULSES, WHEN A KEY IS PRESSED, IN TIME WITH THE KEY ENCODER
0221   0018             ;CHIP'S SCANNING. IF THE KEY BOARD IS READ ONLY ONCE EVERY SECOND, THEN THE SOFTWARE MAY
0222   0018             ;AND PROBABLY) WILL TARE SEVERAL SECONDS TO DETECT THE KEY.
0223   0018             ;THE NUMBER OF READ CYCLES FOR THE KEYBOARD IS LOADED INTO B.
0224   0018             
0225   0018 E5          			PUSH	HL									;SAVE HL
0226   0019 D5          			PUSH	DE									;AND DE
0227   001A CD 36 08    			CALL	L0836								;CALL SCAN ROUTINE
0228   001D D1          			POP		DE									;RECOVER DE
0229   001E E1          			POP		HL									;AND HL
0230   001F 00          			NOP											;NEXT RST
0231   0020 C5          			PUSH	BC									;SAVE BC
0232   0021 06 20       			LD		B, 0x20								;B = NUMBER OF KEYBOARD SCAN LOOPS
0233   0023 CD AD 06    			CALL	L06AD								;CALL KEY READER/VALIDATER
0234   0026 C1          			POP		BC									;RECOVER BC
0235   0027 C9          			RET											;DONE
0236   0028             
0237   0028             ;RST 28 (EF)
0238   0028             ;START STEPPING FROM THE INSTRUCTION FOLLOWING THE RST 28
0239   0028 E3          			EX		(SP), HL							;GET RETURN ADDRESS FROM THE STACK
0240   0029 22 58 08    			LD		(L0858), HL							;PUT IN "NEXT PC" BUFFER
0241   002C E3          			EX		(SP), HL							;FIX UP STACK
0242   002D FB          			EI											;ENABLE INTERRUPTS
0243   002E C9          			RET											;STEPPING WILL OCCUR AFTER RETURN
0244   002F FF          			RST		38H									;SPARE
0245   0030             
0246   0030             ;RST 30 (F7)
0247   0030             ;TEST THE BUSY STATE OF THE LCD AND LOOP WHILE BUSY
0248   0030 DB 04       L0030:		IN		A, (LCDINST)						;READ STATUS BIT FROM LCD
0249   0032 07          			RLCA										;PUT IN CARRY
0250   0033 38 FB       			JR		C, L0030							;LOOP IF LCD BUSY
0251   0035 C9          			RET											;DONE
0252   0036 FF          			RST		38H
0253   0037 FF          			RST		38H
0254   0038             
0255   0038             ;RST 38 (FF)
0256   0038             ;INTERRUPT HANDLER FOR STEPPER AND BREAK-POINTS
0257   0038 C3 12 03    			JP		L0312								;JUMP TO STEPPER ROUTINE
0258   003B FF          			RST		38H									;"FF"
0259   003C FF          			RST		38H									;"FF"
0260   003D FF          			RST		38H									;"FF"
0261   003E FF          			RST		38H									;"FF"
0262   003F FF          			RST		38H									;"FF"
0263   0040 FF          			RST		38H									;"FF"
0264   0041             
0265   0041             ;JUMP TABLE FOR EXTERNAL SOFTWARE TO USE JMON ROUTINES
0266   0041 C3 DD 03    L0041:		JP		L03DD								;MENU GATE
0267   0044 C3 79 04    L0044:		JP		L0479								;PERIMETER HANDLER ENTRY
0268   0047 C3 ED 03    L0047:		JP		L03ED								;SOFT MENU ENTRY
0269   004A C3 9F 06    L004A:		JP		L069F								;ERR-IN ENTRY
0270   004D C3 B4 05    L004D:		JP		L05B4								;PASS/FAIL/MENU
0271   0050 C3 A3 04    L0050:		JP		L04A3								;SOFT PERIMETER HANDLER ENTRY
0272   0053 FF          			RST		38H									;"FF"
0273   0054 FF          			RST		38H									;"FF"
0274   0055 FF          			RST		38H									;"FF"
0275   0056 FF          			RST		38H									;"FF"
0276   0057 FF          			RST		38H									;"FF"
0277   0058 FF          			RST		38H									;"FF"
0278   0059 FF          			RST		38H									;"FF"
0279   005A FF          			RST		38H									;"FF"
0280   005B FF          			RST		38H									;"FF"
0281   005C FF          			RST		38H									;"FF"
0282   005D FF          			RST		38H									;"FF"
0283   005E             
0284   005E             ;SHIFT-2 ROUTINE
0285   005E             ;THIS STORES THE CURRENT EDIT LOCATION IN THE "NEXT PC" BUFFER. THE INTERRUPTS ARE THEN
0286   005E             ;ENABLED AND THE PROGRAM JUMPS TO THE USER ROUTINE TO BE STEPPED. STEPPING OCCURS AT THE
0287   005E             ;CURRENT EDIT LOCATION (CEL).
0288   005E 2A 2E 08    			LD		HL, (L082E)							;PUT CURRENT EDIT LOCATION IN
0289   0061 22 58 08    			LD		(L0858), HL							;"NEXT PC" BUFFER
0290   0064 FB          			EI											;ENABLE INTERRUPTS
0291   0065 E9          			JP		(HL)								;START STEPPING
0292   0066             
0293   0066             ;NMI HANDLER (IMMEDIATE RETURN)
0294   0066 ED 45       			RETN										;IGNORE NMI
0295   0068 FF          			RST		38H									;RESERVED
0296   0069 FF          			RST		38H									;FOR A "Post Burn"
0297   006A FF          			RST		38H									;JUMP LOCATION
0298   006B             
0299   006B             ;CONTINUATION OF MONITOR
0300   006B ED 56       L006B:		IM		1									;SET INTERRUPT MODE 1 FOR STEPPER
0301   006D 22 2E 08    			LD		(L082E), HL							;STORE SOFT RESET INITIAL CEL
0302   0070 21 76 00    			LD		HL, L0076							;LOAD HL WITH RE-ENTRY ADDRESS
0303   0073 C3 18 03    			JP		L0318								;JUMP TO SAVE REGISTERS
0304   0076             
0305   0076             
0306   0076             ;RE-ENTRY POINT AFTER SAVING REGISTERS
0307   0076 31 20 08    L0076:		LD		SP, L0820							;SET STACK (to the Keyboard Buffer??)
0308   0079 CD F7 02    			CALL	L02F7								;CALL RESET PATCH HANDLER
0309   007C E7          			RST		20H									;LOOK FOR FORCED HARD RESET
0310   007D 28 07       			JR		Z, L0086							;JUMP KEY PRESSED TO HARD RESET
0311   007F 3A FF 08    			LD		A, (L08FF)							;CHECK HARD/RESET FLAG
0312   0082 FE AA       			CP		0xAA								;FOR AA
0313   0084 28 1C       			JR		Z, L00A2							;JUMP TO SOFT RESET IF AA
0314   0086             
0315   0086             ;HARD RESET
0316   0086             ;MONITOR DEFAULT VARIABLES ARE RE-BOOTED AND USER PATCHES MASKED OFF.
0317   0086             
0318   0086 21 0F 07    L0086:		LD		HL, L070F							;LOAD HL WITH START OF JMON DEFAULT
0319   0089 11 20 08    			LD		DE, L0820							;VARIABLES ROM TABLE
0320   008C 01 2B 00    			LD		BC, 0x002B							;DE IS THE RAM DE(stination)
0321   008F ED B0       			LDIR										;AND BC THE COUNT: MOVE TABLE
0322   0091 06 03       			LD		B, 0x03								;MASK OF THE THREE USER PATCHES
0323   0093 3E C9       			LD		A, 0xC9								;BY PUTTING A RETURN AT THE FIRST
0324   0095 12          L0095:		LD		(DE), A								;LOCATION OF EACH
0325   0096 13          			INC		DE									;
0326   0097 13          			INC		DE									;
0327   0098 13          			INC		DE									;
0328   0099 10 FA       			DJNZ	L0095								;
0329   009B CD D5 06    			CALL	L06D5								;INITIALIZE/TEST FOR THE LCD
0330   009E AF          			XOR		A									;CLEAR HARD/SOFT
0331   009F 32 FF 08    			LD		(L08FF), A							;RESET FLAG
0332   00A2             
0333   00A2             ;THIS SECTION IS THE SOFT RESET SECTION. IT IS ALSO PART OF THE HARD RESET SECTION.
0334   00A2 21 00 38    L00A2:		LD		HL, L3800							;TEST FOR JMON UTILITIES ROM
0335   00A5 7E          			LD		A, (HL)
0336   00A6 FE C3       			CP		0xC3								;AND CALL ITS RESET ROUTINE
0337   00A8 CC 00 38    			CALL	Z, L3800							;IF REQUIRED
0338   00AB CD 3C 08    			CALL	L083C								;CALL RESET TONE ROUTINE
0339   00AE AF          			XOR		A									;CLEAR MONITOR CONTROL BYTE
0340   00AF 32 2B 08    			LD		(L082B), A							;0 = DATA MODE, NO NIBBLES ENTERED
0341   00B2             
0342   00B2             ;EACH TIME A KEYBOARD INPUT OR USER PATCH "PLANT", IS PROCESSED, THE PROGRAM JUMPS BACK
0343   00B2             ;TO HERE SO THE DISPLAYS MAY BE UP-DATED.
0344   00B2             
0345   00B2 2A 2E 08    L00B2:		LD		HL, (L082E)							;GET CURRENT EDIT LOCATION (CEL)
0346   00B5 ED 4B 2C 08 			LD		BC, (L082C)							;AND DISPLAY BUFFER ADDRESS
0347   00B9 CD 30 08    			CALL	L0830								;AND CONVERT CEL TO DISPLAY CODE
0348   00BC 7E          			LD		A, (HL)								;AND THEN CONVERT CONTENTS OF
0349   00BD CD 33 08    			CALL	L0833								;CEL TO DISPLAY CODE
0350   00C0 CD 39 08    			CALL	L0839								;CALL THE SET DOTS ROUTINE
0351   00C3 CD 42 08    			CALL	L0842								;CALL SCAN/KEY/LCD/PATCH ROUTINE
0352   00C6             
0353   00C6             ;THE SECTION BELOW IS EXECUTED WHEN EITHER A KEY OR KEY "PLANT" IS DETECTED IN THE
0354   00C6             ;SCAN/KEY/LCD/PATCH ROUTINE ROUTINE
0355   00C6             
0356   00C6 2A 2E 08    			LD		HL, (L082E)							;POINT HL TO CURRENT EDIT LOCATION
0357   00C9 4F          			LD		C, A								;PRESERVE INPUT KEY IN C
0358   00CA 3A 2B 08    			LD		A, (L082B)							;GET MONITOR CONTROL BYTE (MCB)
0359   00CD CB 67       			BIT		4, A								;TEST FOR ADDRESS OR FUNCTION MODE
0360   00CF 47          			LD		B, A								;STORE MCB IN B
0361   00D0 79          			LD		A, C								;GET INPUT KEY BACK IN A
0362   00D1 20 2F       			JR		NZ, L0102							;JUMP IF ADDRESS OR FUNCTION MODE
0363   00D3 FE 10       			CP		0x10								;TEST FOR "+"
0364   00D5 20 0C       			JR		NZ, L00E3							;JUMP IF NOT TO TEST FOR "-"
0365   00D7             
0366   00D7             ;"+" KEY HANDLER-(WHEN IN DATA MODE ONLY)
0367   00D7             
0368   00D7 23          			INC		HL									;ADD 1 TO CURRENT EDIT LOCATION
0369   00D8             
0370   00D8             ;COMMON CEL AND MCB UP-DATER
0371   00D8             ;SEVERAL SECTIONS JUMP HERE TO STORE AN UP-DATED CEL AND CLEAR THE NIBBLE COUNTER.
0372   00D8             
0373   00D8 22 2E 08    L00D8:		LD		(L082E), HL							;STORE CEL
0374   00DB 78          			LD		A, B								;GET MCB
0375   00DC             
0376   00DC             ;COMMON MCB UP-DATER
0377   00DC             ;SOME KEY HANDLER SECTION THAT DON'T REQUIRE.A NEW CEL (OR HAVE ALREADY STORED IT) JUMP HERE.
0378   00DC             
0379   00DC E6 FC       L00DC:		AND		0xFC								;CLEAR NIBBLE COUNTER
0380   00DE 32 2B 08    			LD		(L082B), A							;STORE MCB
0381   00E1 18 CF       L00E1:		JR		L00B2								;JUMP BACK TO UPDATE DISPLAY
0382   00E3 FE 11       L00E3:		CP		0x11								;TEST FOR "-"
0383   00E5 20 03       			JR		NZ, L00EA							;JUMP IF NOT TO TEST FOR "GO"
0384   00E7             
0385   00E7             ;"-" KEY HANDLER (WHEN IN DATA MODE ONLY)
0386   00E7 2B          			DEC		HL									;DECREASE CEL ADDRESS BY ONE
0387   00E8 18 EE       			JR		L00D8								;JUMP TO COMMON CEL AND MCB UP-DATER
0388   00EA FE 12       L00EA:		CP		0x12								;TEST FOR GO
0389   00EC 20 14       			JR		NZ, L0102							;JUMP IF NOT TO TEST FOR "AD"
0390   00EE             
0391   00EE             ;"GO" HANDLER (WHEN IN DATA MODEONLY)
0392   00EE 3A 23 08    			LD		A, (L0823)							;TEST FOR ALTERNATE GO ADDRESS
0393   00F1 FE AA       			CP		0xAA								;IF (0823)=AA
0394   00F3 28 05       			JR		Z, L00FA							;JUMP IF SET FOR ALTERNATE GO ADDR
0395   00F5 2A 2E 08    			LD		HL, (L082E)							;ELSE GET CURRENT EDIT LOCATION
0396   00F8 18 03       			JR		L00FD								;SKIP ALTERNATE JUMP ADDRESS FETCH
0397   00FA 2A 28 08    L00FA:		LD		HL, (L0828)							;GET ALTERNATE GO ADDRESS
0398   00FD 11 45 08    L00FD:		LD		DE, L0845							;PUT RETURN ADDRESS ON STACK
0399   0100 D5          			PUSH	DE
0400   0101 E9          			JP		(HL)								;START USER EXECUTION
0401   0102             
0402   0102             ;TEST HERE FOR ADDRESS KEY. IF THE KEY PRESSED IS NOT THE ADDRESS KEY, THEN A JUMP IS
0403   0102             ;PERFORMED. OTHERWISE THE ADDRESS KEY IS PROCESSED.
0404   0102             
0405   0102 FE 13       L0102:		CP		0x13								;TEST FOR ADDRESS KEY
0406   0104 20 0B       			JR		NZ, L0111							;0= IF NOT TO DATA KEY HANDLER
0407   0106 78          			LD		A, B								;GET MONITOR CONTROL BYTE (MCB)
0408   0107 CB 68       			BIT		5, B								;TEST FOR FUNCTION MODE AND JUMP TO
0409   0109 20 02       			JR		NZ, L010D							;CLEAR FUNCTION MODE BITS IF SO
0410   010B EE 10       			XOR		0x10								;ELSE TOGGLE ADDRESS MODE BIT
0411   010D E6 D3       L010D:		AND		0xD3								;CLEAR ALL FUNCTION MODE BITS
0412   010F 18 CB       			JR		L00DC								;LOOP BACK TO COMMON MCB UP-DATER
0413   0111             
0414   0111             ;A TEST FOR ADDRESS/FUNCTION MODE IS DONE. IF IN ADDRESS OR FUNCTION MODE A JUMP IS PERFORMED.
0415   0111 78          L0111:		LD		A, B								;GET MCB
0416   0112 CB 67       			BIT		4, A								;TEST FOR ADDRESS OR FUNCTION MODE
0417   0114 20 25       			JR		NZ, L013B							;JUMP IF EITHER MODE
0418   0116             
0419   0116             ;A TEST FOR SHIFT IS DONE AND A JUMP IS PERFORMED IF IN THE SHIFT MODE TO THE FUNCTION/SHIFT HANDLER.
0420   0116 DB 00       			IN		A, (KEYBOARD)						;TEST FOR THE SHIFT KEY
0421   0118 CB 6F       			BIT		5, A								;AND JUMP IF SHIFT IS PRESSED
0422   011A 28 34       			JR		Z, L0150							;TO THE FUNCTION HANDLER
0423   011C             
0424   011C             ;ANY TIME A DATA KEY IS PRESSED WHILE IN THE DATA MODE, IT IS PROCESSED STARTING HERE.
0425   011C 78          			LD		A, B								;GET MCB
0426   011D E6 03       			AND		0x03								;MASK IT DOWN TO BYTE COUNTER
0427   011F FE 02       			CP		0x02								;AND TEST FOR TWO NIBBLES ENTERED
0428   0121 78          			LD		A, B								;INPUT KEY VALUE BACK IN A
0429   0122 20 0E       			JR		NZ, L0132							;JUMP IF NOT READY FOR AUTO INC
0430   0124 F5          			PUSH	AF									;SAVE MCB
0431   0125 3A 27 08    			LD		A, (L0827)							;TEST AUTO INC MASK
0432   0128 B7          			OR		A									;IF NOT ZERO THEN JUMP AS USER
0433   0129 20 04       			JR		NZ, L012F							;HAS SWITCHED OFF AUTO INC MODE
0434   012B 23          			INC		HL									;ELSE INCREMENT CEL BEFORE ENTERING
0435   012C 22 2E 08    			LD		(L082E), HL							;NEW NIBBLE AND STORE NEW CEL
0436   012F F1          L012F:		POP		AF									;RECOVER MON CONTROL BYTE IN A
0437   0130 E6 FC       			AND		0xFC								;CLEAR BYTE COUNTER (BITS 0 AND 1)
0438   0132 3C          L0132:		INC		A									;ADD ONE TO NIBBLE COUNTER
0439   0133 32 2B 08    			LD		(L082B), A							;STORE IT
0440   0136 3A 20 08    			LD		A, (L0820)							;GET INPUT KEY FROM INPUT BUFFER
0441   0139 18 11       			JR		L014C								;JUMP TO ENTER IT
0442   013B             
0443   013B             ;TEST HERE FOR A CONTROL KEY WHILE IN EITHER THE ADDRESS OR FUNCTION MODE AND JUMP TO
0444   013B             ;ENCODE THE FUNCTION NUMBER BITS (2 AND 3 OF MCB). IF NOT A CONTROL KEY, THEN TEST FOR
0445   013B             ;THE FUNCTION MODE AND JUMP TO FUNCTION JUMP CONTROL IF SO, ELSE SERVICE DATA KEY FOR
0446   013B             ;ADDRESS MODE.
0447   013B             
0448   013B 3A 20 08    L013B:		LD		A, (L0820)							;GET INPUT KEY FROM INPUT BUFFER
0449   013E CB 67       			BIT		4, A								;TEST FOR CONTROL KEY (+,- OR GO)
0450   0140 20 2F       			JR		NZ, L0171							;JUMP IF CONTROL TO FUNCTION ENCODER
0451   0142 CB 68       			BIT		5, B								;TEST FUNCTION MODE
0452   0144 20 0A       			JR		NZ, L0150							;JUMP IF SO TO FUNCTION JUMP CONTROL
0453   0146             
0454   0146             ;DATA KEY PRESS WHILE IN THE ADDRESS MODE
0455   0146 21 2E 08    			LD		HL, L082E							;POINT HL TO CEL BUFFER
0456   0149 ED 6F       			RLD											;AND SHIFT IN THE NEW NIBBLE
0457   014B 23          			INC		HL									;AND MOVE THE OTHERS ACROSS
0458   014C ED 6F       L014C:		RLD											;THIS RLD USED BY DATA MODE ALSO
0459   014E 18 91       L014E:		JR		L00E1								;JUMP (VIA A JUMP) TO UP-DATE DISPLAYS
0460   0150             
0461   0150             ;FUNCTION AND SHIFT JUMP CONTROL
0462   0150             ;BITS 2 AND 3 OF THE MONITOR CONTROL BYTE (MCB) ARE THE FUNCTION IDENTIFIER BITS.
0463   0150             ;IF BOTH ARE ZERO THEN EITHER FUNCTION 1 IS SELECTED OR NO FUNCTION IS SELECTED. BECAUSE
0464   0150             ;THIS IS THE ALSO THE NO FUNCTION MODE ENABLED STATE, THE SHIFT KEY, WHICH DOES NOT AFFECT
0465   0150             ;THE MONITOR CONTROL BYTE, WILL ALSO WILL INVOKE FUNCTION 1. (THEREFORE THIS ROUTINE DOES
0466   0150             ;NOT NEED TO TEST FOR THE SHIFT KEY).
0467   0150             ;IF BIT 2 IS HIGH THEN FUNCTION 2 IS SELECTED AND IF BIT 3 IS HIGH THEN FUNCTION 3 IS
0468   0150             ;SELECTED.
0469   0150             ;DURING THIS ROUTINE, HL IS LOADED TO THE BASE OF THE REQUIRED JUMP TABLE MINUS TWO BYTES
0470   0150             ;(ONE ENTRY). THIS IS BECAUSE THE OFFSET PROVIDED FROM THE KEYBOARD HAS BEEN INCREMENTED
0471   0150             ;BY ONE. THIS SAVES TESTING FOR ZERO INPUT WHICH WOULD NOT ALLOW THE TABLE ACCESSING TO
0472   0150             ;WORK CORRECTLY. THE REQUIRED BASE IS FOUND BY EXAMINING THE STATE OF THE BITS 2 AND 3 OF
0473   0150             ;THE MONITOR CONTROL BYTE (MCB) AND LOADING HI, ACCORDINGLY.
0474   0150             ;AS EACH ENTRY IS TWO BYTES LONG, THE TABLE POINTER (THE VALUE INSIDE HL), IS INCREMENTED
0475   0150             ;TWICE FOR EACH DECREMENT OF THE INPUT VALUE (FROM THE KEYBOARD). WHEN THE REQUIRED TABLE
0476   0150             ;ENTRY IS FOUND, 17 IS PUT' INSIDE EL (VIA_ DE) AND THE ROUTINE JUMPS TO PART OF THE "GO"
0477   0150             ;KEY ROUTINE TO CREATE A RETURN ADDRESS ON THE STACK AND EXECUTE THE SELECTED ROUTINE.
0478   0150             
0479   0150 78          L0150:		LD		A, B								;PUT MONITOR CONTROL BYTE IN A
0480   0151 E6 0C       			AND		0x0C								;MASK IT DOWN TO FUNCTION BITS
0481   0153 21 DE 07    			LD		HL, L07DE							;JMON FUNCTION JUMP TABLE BASE -2
0482   0156 28 0A       			JR		Z, L0162							;JUMP IF FUNCTION 1 OR SHIFT
0483   0158 21 BE 08    			LD		HL, L08C0							;LOAD HL WITH USER TABLE -2
0484   015B             														;*** Value is 08BE as User Table is at 08C0
0485   015B FE 04       			CP		0x04								;TEST FOR FUNCTION 2
0486   015D 28 03       			JR		Z, L0162							;JUMP IF FUNCTION 2 (USER FUNCTION)
0487   015F 21 1E 38    			LD		HL, L381E							;OTHERWISE MUST BE FUNCTION 3
0488   0162 3A 20 08    L0162:		LD		A, (L0820)							;GET INPUT KEY FROM INPUT BUFFER
0489   0165 3C          			INC		A									;ADD ONE IN CASE IT WAS ZERO
0490   0166 47          			LD		B, A								;PUT IN B TO USE AS A LOOP COUNTER
0491   0167 23          L0167:		INC		HL									;LOOK THROUGH TABLE
0492   0168 23          			INC		HL									;FOR RIGHT JUMP VECTOR
0493   0169 10 FC       			DJNZ	L0167
0494   016B 5E          			LD		E, (HL)								;PUT IT IN HL
0495   016C 23          			INC		HL									;VIA DE
0496   016D 56          			LD		D, (HL)
0497   016E EB          			EX		DE, HL								;JUMP TO CREATE RETURN ADDRESS AND
0498   016F 18 8C       			JR		L00FD								;EXECUTE SELECTED ROUTINE
0499   0171             
0500   0171             ;FUNCTION NUMBER ENCODER
0501   0171             ;THIS SECTION ENCODES THE FUNCTION IDENTIFIER BITS (BITS 2 AND 3) IN THE MONITOR CONTROL
0502   0171             ;BYTE (BITS 2 AND 3) THEN SETS THE FUNCTION ENABLE BIT (BIT 5).
0503   0171             ;THE FUNCTION IDENTIFIER BITS ARE DERIVED FROM THE LEAST TWO SIGNIFICANT BITS OF THE INPUT
0504   0171             ;CONTROL KEY (+, AND GO). THESE ARE SHIFTED LEFT TWICE TO ALIGN THEM TO THE FUNCTION
0505   0171             ;SELECT BITS (BITS 2 AND 3) IN THE MCB. THE INPUT CONTROL KEY IS IN THE ACCUMULATOR ON
0506   0171             ;ENTRY AND THE MONITOR CONTROL BYTE (MCB) IN B.
0507   0171             
0508   0171 E6 03       L0171:		AND		0x03								;MASK DOWN CONTROL KEY
0509   0173 07          			RLCA										;SHIFT IT LEFT TWICE TO ALIGN BITS 0
0510   0174 07          			RLCA										;AND 1 TO FUNCTION IDENTITY BITS IN MCB
0511   0175 F6 20       			OR		0x20								;SET FUNCTION MODE ENABLED FLAG
0512   0177 4F          			LD		C, A								;SAVE IN C
0513   0178 78          			LD		A, B								;GET CURRENT MCB
0514   0179 E6 D3       			AND		0xD3								;CLEAR ANY PREVIOUS FUNCTION BITS
0515   017B B1          			OR		C									;MERGE TOGETHER
0516   017C 32 2B 08    			LD		(L082B), A							;STORE MCB
0517   017F 18 CD       			JR		L014E								;JUMP VIA JUMPS TO UP-DATE DISPLAYS
0518   0181             
0519   0181             ;THIS IS THE SCAN/KEY/LCD/PATCH ROUTINE. THIS ROUTINE LOOPS SCANNING THE LED DISPLAY AND
0520   0181             ;SERVICING THE "DURING LOOP" USER PATCH UNTIL A KEY PRESS IS VALIDATED BY THE AUTO-KEY
0521   0181             ;REPEAT SECTION. THE INPUT KEY IS RETURNED IN THE ACCUMULATOR AND IN THE INPUT BUFFER AT
0522   0181             ;0820 WITH THE ZERO FLAG SET AND CARRY CLEARED.
0523   0181             ;THREE PATCHES ARE SUPPORTED IN THIS ROUTINE. THEY ARE A PATCH BEFORE LOOP, A PATCH DURING
0524   0181             ;THE LOOP AND A PATCH AFTER A VALID KEY PRESS.
0525   0181             ;THE "PLANT" IS A VALUE INSERTED INTO THE INPUT BUFFER (0820) BY THE DURING LOOP PATCH.
0526   0181             ;THE "PLANT" VALUE IS IDENTIFIED BY BIT 7 OF THE INPUT BUFFER BEING SET. BIT 7 IS RESET
0527   0181             ;BEFORE RETURNING TO SERVICE THE PLANT.
0528   0181             ;THIS ROUTINE USES A BYTE AT 082A, CALLED THE AUTO KEY STATUS BYTE AS A FLAG AND TIMER
0529   0181             ;TO GENERATE THE AUTO REPEAT DELAY.
0530   0181             
0531   0181 CD 48 08    			CALL	L0848								;CALL LCD ROUTINES
0532   0184 CD 4B 08    			CALL	L084B								;CALL PRE-SCAN USER PATCH
0533   0187 CD 36 08    L0187:		CALL	L0836								;CALL SCAN
0534   018A CD 4E 08    			CALL	L084E								;CALL USER "DURING LOOP" PATCH
0535   018D 21 20 08    			LD		HL, L0820							;TEST KEY INPUT BUFFER BIT 7 FOR A
0536   0190 CB 7E       			BIT		7, (HL)								;"PLANT" INSERTED BY USER DURING
0537   0192 CB BE       			RES		7, (HL)								;PATCH: RESET BIT 7 RETURN TO
0538   0194 C0          			RET		NZ									;SERVICE "PLANT" IF BIT 7 NOT ZERO
0539   0195 E7          			RST		20H									;TEST FOR KEY PRESS VIA RST 20
0540   0196 21 2A 08    			LD		HL, L082A							;SET HL TO POINT TO AUTO KEY STATUS
0541   0199 38 04       			JR		C, L019F							;JUMP IF A KEY IS PRESSED
0542   019B 36 80       			LD		(HL), 0x0080						;ELSE SET AUTO KEY STATUS TO
0543   019D 18 E8       			JR		L0187								;NO KEY STATE AND CONTINUE LOOP
0544   019F CD CA 06    L019F:		CALL	L06CA								;CALL UNIVERSAL KEY INPUTTER
0545   01A2 CB 7E       			BIT		7, (HL)								;TEST AUTO KEY STATUS FOR FIRST KEY
0546   01A4 20 10       			JR		NZ, L01B6							;JUMP IF SO TO SET LONG KEY DELAY
0547   01A6 35          			DEC		(HL)								;ELSE COUNT DOWN KEY DELAY
0548   01A7 20 DE       			JR		NZ, L0187							;LOOP IF NOT READY FOR KEY REPEAT
0549   01A9 36 0C       			LD		(HL), 0x0C							;ELSE SET SHORT TIME DELAY BETWEEN
0550   01AB CD 51 08    L01AB:		CALL	L0851								;KEYS: CALL USER "AFTER KEY" PATCH
0551   01AE CD 3F 08    			CALL	L083F								;CALL KEY TONE
0552   01B1 AF          			XOR		A									;SET ZERO FLAG AND CLEAR CARRY
0553   01B2 3A 20 08    			LD		A, (L0820)							;PUT INPUT KEY IN A
0554   01B5 C9          			RET											;AND RETURN FOR KEY SERVICE
0555   01B6 36 70       L01B6:		LD		(HL), 0x0070						;SET KEY TIMER FOR LONG DELAY
0556   01B8 18 F1       			JR		L01AB								;JUMP TO SERVICE PATCH, TONE ETC.
0557   01BA             
0558   01BA             ;THIS IS THE LED SCAN ROUTINE.
0559   01BA 06 20       			LD		B, 20H								;B IS THE SCAN BIT
0560   01BC 2A 2C 08    			LD		HL, (L082C)							;GET ADDRESS OF DISPLAY BUFFER
0561   01BF 7E          L01BF:		LD		A, (HL)								;GET FIRST BYTE
0562   01C0 D3 02       			OUT		(DSEGMENT), A						;AND OUTPUT IT TO SEGMENTS
0563   01C2 78          			LD		A, B								;GET SCAN BIT
0564   01C3 D3 01       			OUT		(DSCAN), A							;OUTPUT IT TO COMMONS
0565   01C5 06 40       			LD		B, 40H								;CREATE SHORT
0566   01C7 10 FE       L01C7:		DJNZ	L01C7								;DELAY IN B
0567   01C9 23          			INC		HL									;INCREASE HL TO NEXT DISPLAY BYTE
0568   01CA 47          			LD		B, A								;GET SCAN BIT BACK IN B
0569   01CB AF          			XOR		A									;CLEAR THE LAST PORT OUTPUTTED TO
0570   01CC D3 01       			OUT		(DSCAN), A							;TO PREVENT "GHOSTING"
0571   01CE CB 08       			RRC		B									;SHIFT SCAN BIT ACROSS TO NEXT
0572   01D0 30 ED       			JR		NC, L01BF							;COMMON: WHEN SCAN BIT FALLS INTO
0573   01D2 D3 02       			OUT		(DSEGMENT), A						;CARRY SCAN IS TERMINATED: CLEAR
0574   01D4 C9          			RET											;PORT 2 AND RETURN
0575   01D5             
0576   01D5             ;THIS ROUTINE CONVERTS HL TO DISPLAY CODE AND STORE THE DISPLAY CODE IN A BUFFER POINTED TO BY BC.
0577   01D5 7C          			LD		A, H								;PUT H IN A
0578   01D6 CD 33 08    			CALL	L0833								;CONVERT A TO DISPLAY CODE
0579   01D9 7D          			LD		A, L								;NOW DO FOR L
0580   01DA             
0581   01DA             ;THIS SECTION CONVERTS THE BYTE IN A TO TWO DISPLAY BYTES.
0582   01DA F5          			PUSH	AF									;SAVE A
0583   01DB 07          			RLCA										;SHIFT MSN TO LSN PLACE
0584   01DC 07          			RLCA										;FOR NIBBLE AT A TIME CONVERSION
0585   01DD 07          			RLCA
0586   01DE 07          			RLCA
0587   01DF CD E3 01    			CALL	L01E3								;CONVERT FIRST NIBBLE
0588   01E2 F1          			POP		AF									;RECOVER A TO CONVERT SECOND NIBBLE
0589   01E3 E6 0F       L01E3:		AND		0x0F								;MASK OF HIGH NIBBLE
0590   01E5 11 D0 07    			LD		DE, 07D0H							;SET DE TO BASE OF CONVERSION
0591   01E8 83          			ADD		A, E								;TABLE: ADD A TO BASE
0592   01E9 5F          			LD		E, A								;UPDATE POINTER
0593   01EA 1A          			LD		A, (DE)								;GET DISPLAY CODE
0594   01EB 02          			LD		(BC), A								;STORE IN DISPLAY BUFFER
0595   01EC 03          			INC		BC									;INCREMENT DISPLAY BUFFER POINTER
0596   01ED C9          			RET											;NIBBLE CONVERSION DONE
0597   01EE             
0598   01EE             ;SET DOTS
0599   01EE             ;THIS ROUTINE SETS THE DOTS IN THE DISPLAY BUFFER. IF IN ADDRESS MODE THEN 4 DOTS ARE SET
0600   01EE             ;IN THE ADDRESS DISPLAY BUFFER, IF IN A FUNCTION MODE, THEN ONE DOT IN THE ADDRESS DISPLAY
0601   01EE             ;- RIGHT MOST FOR FUNCTION 1 SECOND RIGHT FOR FUNCTION 2 AND THIRD RIGHT FOR FUNCTION 3.
0602   01EE             ;IF IN THE DATA MODE THEN 2 DOTS IN THE DATA DISPLAY BUFFER OR ONE DOT, ON THE RIGHTMOST
0603   01EE             ;DISPLAY, IF TWO NIBBLES HAVE BEEN ENTERED AND IN THE AUTO-INCREMENT MODE.
0604   01EE             
0605   01EE 06 02       			LD		B, 0x02								;SET B FOR 2 DOTS
0606   01F0 2A 2C 08    			LD		HL, (L082C)							;PUT DISPLAY BUFFER IN HL
0607   01F3 3A 2B 08    			LD		A, (L082B)							;GET MONITOR CONTROL BYTE (MCB)
0608   01F6 CB 67       			BIT		4, A								;TEST FOR ADDRESS OR FUNCTION MODE
0609   01F8 28 1A       			JR		Z, L0214							;JUMP IF NOT TO DO DATA DOTS
0610   01FA CB 6F       			BIT		5, A								;TEST ONLY FOR FUNCTION MODE
0611   01FC 20 08       			JR		NZ, L0206							;JUMP IF FUNCTION MODE
0612   01FE 06 04       			LD		B, 4								;ADDRESS MODE SO SET B FOR 4 DOTS
0613   0200 CB E6       L0200:		SET		4, (HL)								;SET DOT IN DISPLAY BUFFER
0614   0202 23          			INC		HL									;NEXT LOCATION
0615   0203 10 FB       			DJNZ	L0200								;DO 4 TIMES
0616   0205 C9          			RET											;DONE
0617   0206             
0618   0206 05          L0206:		DEC		B									;FUNCTION MODE: SET B FOR ONE DOT
0619   0207 CB 5F       			BIT		3, A								;TEST FOR FUNCTION 3
0620   0209 20 06       			JR		NZ, L0211							;JUMP IF FUNCTION 3 TO ADD HL+1
0621   020B CB 57       			BIT		2, A								;TEST FOR FUNCTION 2
0622   020D 20 01       			JR		NZ, L0210							;JUMP IF FUNCTION 2 TO ADD HL+2
0623   020F 23          L020F:		INC		HL									;INCREMENT HL TO POINT TO THE
0624   0210 23          L0210:		INC		HL									;REQUIRED DISPLAY BYTE
0625   0211 23          L0211:		INC		HL									;
0626   0212 18 EC       			JR		L0200								;JUMP TO SET DOT
0627   0214 23          L0214:		INC		HL									;DATA MODE: HL NOW POINTS TO SECOND
0628   0215 4F          			LD		C, A								;LEFT MOST DISPLAY BUFFER: SAVE MCB
0629   0216 3A 27 08    			LD		A, (L0827)							;IN C: TEST AUTO INCREMENT ENABLE
0630   0219 B7          			OR		A									;FLAG
0631   021A 20 F3       			JR		NZ, L020F							;JUMP IF NO AUTO INCREMENT TO SET BOTH
0632   021C CB 49       			BIT		1, C								;DATA DOTS: TEST BYTE COUNTER FOR 2
0633   021E 28 EF       			JR		Z, L020F							;NIBBLES: JUMP IF NOT TO SET BOTH DATA
0634   0220 23          			INC		HL									;DOTS: ELSE SKIP DOT ON ONE DISPLAY
0635   0221 05          			DEC		B									;AND DECREASE DOT COUNT FROM 2 TO 1
0636   0222 18 EB       			JR		L020F								;JUMP TO ADJUST HL AND SET DOTS
0637   0224             
0638   0224             ;MASKABLE RESET TONE ROUTINE
0639   0224             ;IF 0822 IS NOT ZERO THEN NO TONE
0640   0224 CD 3F 08    			CALL	L083F								;CALL TONE
0641   0227             
0642   0227             ;MASKABLE TONE ROUTINE
0643   0227 3A 22 08    			LD		A, (L0822)							;TEST SOUND MASK
0644   022A B7          			OR		A									;
0645   022B C0          			RET		NZ									;NO TONE IF NOT ZERO
0646   022C 0E 40       			LD		C, 0x40								;LOAD C WITH PERIOD
0647   022E 2E 31       			LD		L, 0x31								;LOAD L WITH NUMBER OF CYCLES
0648   0230 AF          			XOR		A									;CLEAR A
0649   0231 D3 01       L0231:		OUT		(DSCAN), A							;OUT TO SPEAKER
0650   0233 41          			LD		B, C								;
0651   0234 10 FE       L0234:		DJNZ	L0234								;DELAY FOR PERIOD
0652   0236 EE 80       			XOR		0x80								;TOGGLE SPEAKER BIT
0653   0238 2D          			DEC		L									;DECREMENT CYCLE COUNT
0654   0239 20 F6       			JR		NZ, L0231							;LOOP UNTIL ZERO
0655   023B C9          			RET											;DONE
0656   023C             
0657   023C             ;LCD ROUTINE
0658   023C             ;IF 0821 IS NOT ZERO, THEN LCD HAS BEEN MASKED OFF BY EITHER THE USER OR THE LCD
0659   023C             ;INTIALIZER/TESTER ROUTINE AND NO ACTION IS TAKEN ON THE LCD. THE RST 30 (F7) IS USED
0660   023C             ;EXTENSIVELY TO TEST AND WAIT FOR THE LCD BUSY FLAG. THROUGHOUT THESE NOTES, THE INVISIBLE
0661   023C             ;INTERNAL CURSOR ON THE LCD IS REFERRED TO AS THE CURSOR, WHILE THE ">" ON THE LCD IS
0662   023C             ;REFERRED TO AS THE PROMPT.
0663   023C             
0664   023C 3A 21 08    			LD		A, (L0821)							;TEST LCD MASK
0665   023F B7          			OR		A
0666   0240 C0          			RET		NZ									;NOT ZERO = LCD NOT REQUIRED OR FITTED
0667   0241 3E 80       			LD		A, 0x80								;SET LCD CURSOR TO HOME
0668   0243 D3 04       			OUT		(LCDINST), A
0669   0245 F7          			RST		30H									;WAIT UNTIL LCD READY
0670   0246 CD 53 02    			CALL	L0253								;CALL SET-UP AND OUTPUT FIRST LINE
0671   0249 3E C0       			LD		A, 0xC0								;SET CURSOR TO BOTTOM LINE
0672   024B D3 04       			OUT		(LCDINST), A
0673   024D F7          			RST		30H									;WAIT
0674   024E CD 5A 02    			CALL	L025A								;CALL ROUTINE TO OUTPUT BOTTOM LINE
0675   0251 18 33       			JR		L0286								;JUMP TO PROMPT ROUTINE
0676   0253             
0677   0253             ;SET-UP
0678   0253             ;MODIFY CURRENT EDIT LOCATION ADDRESS IN HL SO THAT IT POINTS TO A BYTE AT AN ADDRESS
0679   0253             ;ENDING IN EITHER 0 OR 8.
0680   0253             
0681   0253 2A 2E 08    L0253:		LD		HL, (L082E)							;GET CEL AND PUT LOW BYTE IN A
0682   0256 7D          			LD		A, L								;THEN MASK OFF THE 3 LOWEST BITS
0683   0257 E6 F8       			AND		0xF8								;AS THE ADDR OF THE FIRST BYTE ON
0684   0259 6F          			LD		L, A								;THE LCD WILL END WITH 0 OR 8
0685   025A             
0686   025A             ;OUTPUT A LINE
0687   025A CD 6C 02    L025A:		CALL	L026C								;CALL "HI TO ASCII OUTPUT"
0688   025D 06 04       			LD		B, 04								;SET B FOR 4 BYTES ON A LINE
0689   025F 3E 20       L025F:		LD		A, 0x20								;LOAD A WITH ASCII SPACE
0690   0261 D3 84       			OUT		(LCDDATA), A						;CHARATER AND OUTPUT IT
0691   0263 F7          			RST		30H									;WAIT
0692   0264 7E          			LD		A, (HL)								;GET BYTE TO DISPLAY
0693   0265 CD 71 02    			CALL	L0271								;CONVERT AND OUTPUT IT
0694   0268 23          			INC		HL									;POINT TO NEXT BYTE
0695   0269 10 F4       			DJNZ	L025F								;DO FOR 4 BYTES
0696   026B C9          			RET											;DONE
0697   026C             
0698   026C             ;CONVERT HL TO ASCII (VIA CONVERT A) AND OUTPUT IT
0699   026C 7C          L026C:		LD		A, H								;CONVERT AND
0700   026D CD 71 02    			CALL	L0271								;OUTPUT H
0701   0270 7D          			LD		A, L								;THEN L
0702   0271             
0703   0271             ;CONVERT A TO ASCII AND OUTPUT IT
0704   0271 F5          L0271:		PUSH	AF									;SAVE A FOR SECOND NIBBLE
0705   0272 0F          			RRCA										;SHIFT HIGH NIBBLE ACROSS
0706   0273 0F          			RRCA										;
0707   0274 0F          			RRCA										;
0708   0275 0F          			RRCA										;
0709   0276 CD 7A 02    			CALL	L027A								;CALL NIBBLE CONVERTER
0710   0279 F1          			POP		AF									;RECOVER LOW NIBBLE
0711   027A E6 0F       L027A:		AND		0x0F								;MASK OFF HIGH NIBBLE
0712   027C C6 90       			ADD		A, 0x90								;CONVERT TO
0713   027E 27          			DAA											;ASCII
0714   027F CE 40       			ADC		A, 0x40								;USING THIS
0715   0281 27          			DAA											;AMAZING ROUTINE
0716   0282 D3 84       L0282:		OUT		(LCDDATA), A						;OUTPUT IT
0717   0284 F7          			RST		30H									;WAIT
0718   0285 C9          			RET											;DONE
0719   0286             
0720   0286             ;LCD PROMPT AND MODE WORD OUTPUT
0721   0286             ;THE 3 LOWEST BITS OF THE CURRENT EDIT LOCATION (CEL) ARE USED AS A DISPLACEMENT WHICH IS
0722   0286             ;ADDED TO A TABLE BASE. THE TABLE ENTRIES ARE THE LCD ADDRESSES OF THE PROMPT LOCATIONS.
0723   0286             ;IF THE AUTO INCREMENT MODE IS ON AND 2 NIBBLES HAVE BEEN ENTERED, THE DISPLACEMENT IS
0724   0286             ;INCREMENTED SO THAT THE NEXT PROMPT ADDRESS TABLE ENTRY WILL BE ACCESSED TO MOVE THE
0725   0286             ;PROMPT TO ITS NEXT SCREEN LOCATION. THE TABLE IS 9 ENTRIES LONG. 8 ARE FOR THE SPACES
0726   0286             ;BETWEEN THE DATA BYTES AND THE NINTH IS TO PARK THE PROMPT AT THE TOP LEFT-HAND CORNER
0727   0286             ;WHEN A SCREEN CHANGE IS DUE
0728   0286             
0729   0286 3A 2E 08    L0286:		LD		A, (L082E)							;GET LOW BYTE OF CEL
0730   0289 E6 07       			AND		0x07								;MASK IT DOWN TO THE 3 LOWEST BITS
0731   028B 4F          			LD		C, A								;SAVE IN C
0732   028C 3A 27 08    			LD		A, (L0827)							;TEST FOR AUTO INCREMENT MODE
0733   028F B7          			OR		A									;O=ON
0734   0290 3A 2B 08    			LD		A, (L082B)							;GET MCB
0735   0293 57          			LD		D, A								;PUT MCB IN D
0736   0294 20 05       			JR		NZ, L029B							;JUMP IF AUTO INCREMENT MODE OFF
0737   0296 CB 4F       			BIT		1, A								;TEST FOR 2 NIBBLES ENTERED: JUMP
0738   0298 28 01       			JR		Z, L029B							;IF NOT: ELSE INCREMENT
0739   029A 0C          			INC		C									;DISPLACEMENT TO ADVANCE TO
0740   029B 79          L029B:		LD		A, C								;NEXT PROMPT LOCATION ADDRESS
0741   029C 21 BD 07    			LD		HL, L07BD							;LOAD HL WITH BASE OF PROMPT
0742   029F 85          			ADD		A, L								;TABLE AND ADD DISPLACEMENT
0743   02A0 6F          			LD		L, A								;PUT LOW BYTE OF TABLE ADDRESS
0744   02A1 7E          			LD		A, (HL)								;IN L AND GET PROMPT ADDRESS IN A
0745   02A2 D3 04       			OUT		(LCDINST), A						;AND OUTPUT PROMPT ADDRESS TO LCD
0746   02A4 F7          			RST		30H									;WAIT
0747   02A5 3E 3E       			LD		A, 0x3E								;LOAD A WITH ASCII FOR ">"
0748   02A7 D3 84       			OUT		(LCDDATA), A						;OUTPUT PROMPT
0749   02A9 F7          			RST		30H									;WAIT
0750   02AA             
0751   02AA             ;OUTPUT MODE WORD TO BOTTOM LEFT CORNER OF THE LCD.
0752   02AA             ;IF THE MODE IS EITHER DATA OR ADDR, THEN THE FOUR ASCII BYTES ARE OUTPUTTED. IF IN THE
0753   02AA             ;FUNCTION MODE, THEN ONLY THREE BYTES FROM THE TABLE ARE OUTPUTTED AND THEN THE FUNCTION
0754   02AA             ;NUMBER IS CALCULATED AND OUTPUTTED.
0755   02AA             ;NOTICE THAT FROM THE TABLE BASE THE FIRST ENTRY (DATA) HAS A ZERO DISPLACEMENT WHILE THE
0756   02AA             ;SECOND (ADDR) HAS A DISPLACEMENT OF 4 AND THE THIRD (Fs-) HAS A DISPLACEMENT OF 12.
0757   02AA             ;IF YOU LOOK AT THE TABLE AT 07AD, YOU WILL SEE THAT IT IS STAGGERED WITH THE THIRD ENTRY
0758   02AA             ;12 BYTES AWAY FROM THE BASE.
0759   02AA             
0760   02AA 3E C0       			LD		A, 0xC0								;SET CURSOR TO BOTTOM LINE
0761   02AC D3 04       			OUT		(LCDINST), A						;OUTPUT
0762   02AE F7          			RST		30H									;AND WAIT
0763   02AF 7A          			LD		A, D								;PUT MONITOR CONTROL BYTE (MCB) IN A
0764   02B0 0F          			RRCA										;SHIFT MODE BITS TO BITS 2 AND 3
0765   02B1 0F          			RRCA										;TO USE AS TABLE DISPLACEMENT
0766   02B2 57          			LD		D, A								;SAVE IN D AND MASK OFF ALL BITS
0767   02B3 E6 0C       			AND		0x0C								;EXCEPT THE 2 THAT FLAG BETWEEN DATA,
0768   02B5 21 AD 07    			LD		HL, L07AD							;ADDR AND FUNCTION: A=0 IF DATA, 4 IF
0769   02B8 85          			ADD		A, L								;ADDR, 12 IF FUNCTION, NOTE THAT TABLE
0770   02B9 6F          			LD		L, A								;IS STAGGERED (SEE 07AD): ADD A TO BASE
0771   02BA FE B9       			CP		0xB9								;IF A=B9 THEN MODE IS FUNCTION MODE
0772   02BC 01 84 04    			LD		BC, 0484H							;LOAD C WITH PORT, B WITH BYTE COUNT
0773   02BF 28 06       			JR		Z, L02C7							;JUMP IF FUNCTION MDDE TO OUT 3 BYTES
0774   02C1 ED A3       L02C1:		OUTI										;OUT (HL) TO (C) B=B-1
0775   02C3 F7          			RST		30H									;HL=HL+1: WAIT FOR LCD BUSY FLAG
0776   02C4 20 FB       			JR		NZ, L02C1							;LOOP UNTIL B=0
0777   02C6 C9          			RET											;DONE
0778   02C7             
0779   02C7 06 03       L02C7:		LD		B, 0x03								;ONLY THREE BYTES FOR FUNCTION MODE
0780   02C9 CD C1 02    			CALL	L02C1								;CALL THE OUTPUT ROUTINE ABOVE
0781   02CC 7A          			LD		A, D								;PUT MCB (SHIFTED RIGHT TWICE) IN A
0782   02CD E6 03       			AND		0x03								;MASK IT DOWN TO GET JUST THE FUNCTION
0783   02CF C6 31       			ADD		A, 0x31								;NUMBER BITS: ADD ASCII "1"
0784   02D1 18 AF       			JR		L0282								;JUMP TO OUTPUT FUNCTION NUMBER
0785   02D3             
0786   02D3             ;-END OF MONITOR ROUTINES- (EXCEPT KEYBOARD READER AT 06AD)
0787   02D3             
0788   02D3             ;LCD PROMPT MOVING ROUTINES. (SHIFT AND FUNCTION 1)
0789   02D3             ;THESE ROUTINES ALTER THE CURRENT EDIT LOCATION ADDRESS AND STORE IT IN ITS BUFFER. WHEN
0790   02D3             ;THE RETURN IS DONE, JMON IS RE-ENTERED AT 00132 (VIA THE SOFT RE-ENTRY JUMP AT L0845, THE
0791   02D3             ;ADDRESS OF WHICH HAS BEEN PLACED ON THE STACK BY PART OF THE "GO" ROUTINE).
0792   02D3             
0793   02D3 11 04 00    			LD		DE, 0x0004							;DE= +4
0794   02D6 2A 2E 08    L02D6:		LD		HL, (L082E)							;PUT CEL IN HL
0795   02D9 19          			ADD		HL, DE								;ADD TO GET NEW CEL
0796   02DA 22 2E 08    			LD		(L082E), HL							;STORE IN CEL BUFFER
0797   02DD C9          			RET											;DONE
0798   02DE             
0799   02DE 11 FC FF    			LD		DE, 0xFFFC							;DE= -4
0800   02E1 18 F3       			JR		L02D6								;JUMP TO ADD
0801   02E3 11 FF FF    			LD		DE, 0xFFFF							;DE= -1
0802   02E6 18 EE       			JR		L02D6								;JUMP TO ADD
0803   02E8 11 01 00    			LD		DE, 0x0001							;DE= +1
0804   02EB 18 E9       			JR		L02D6								;JUMP TO ADD
0805   02ED 11 08 00    			LD		DE, 0x0008							;DE= +8
0806   02F0 18 E4       			JR		L02D6								;JUMP TO ADD
0807   02F2 11 F8 FF    			LD		DE, 0xFFF8							;DE= -8
0808   02F5 18 DF       			JR		L02D6								;JUMP TO ADD
0809   02F7             
0810   02F7             ;RESET PATCH CHECKER.
0811   02F7             ;TESTS FOR PATCH REQUIREMENT AND UP TO THE FIRST 256 BYTES OF THE PATCH ROUTINE. THE
0812   02F7             ;CHECKSUM FEATURE ENSURES A WAY TO CHECK THAT THE PATCH OR PATCH VARIABLES HAVE NOT BEEN
0813   02F7             ;CORRUPTED BY A SYSTEM CRASH, OTHERWISE YOU MAY NEVER REGAIN CONTROL OF THE COMPUTER UNLESS
0814   02F7             ;YOU TURN IT OFF, (AND LOSE THE CONTENTS OF YOUR MEMORY - YOU CANNOT RECOVER IT BY A FORCED
0815   02F7             ;HARD RESET AS THE USER PATCH IS EXECUTED BEFORE THE FORCED HARD RESET TEST). (A FORCED
0816   02F7             ;HARD RESET IS WHEN A KEY IS HELD DOWN WHEN THE RESET KEY IS RELEASED).
0817   02F7             ;IF YOU HAVE A NON VOLATILE MEMORY AT 0800 THE SITUATION WOULD BE ABSOLUTELY HOPELESS
0818   02F7             ;WITHOUT THIS CHECKER ROUTINE.
0819   02F7             ;A VARIABLE CAN BE PASSED TO YOUR PATCH ROUTINE IN THE "C" REGISTER. TO DO THIS THE VARIABLE
0820   02F7             ;IS PLACED AT ADDRESS LOCATION 08B3.
0821   02F7             
0822   02F7 3A B0 08    L02F7:		LD		A, (L08B0)							;TEST FOR RESET PATCH REQUIRED
0823   02FA FE AA       			CP		0xAA
0824   02FC C0          			RET		NZ									;RETURN IF NOT
0825   02FD ED 4B B3 08 			LD		BC, (L08B3)							;PUT NO OF BYTES IN B VARIABLE IN C
0826   0301 2A B1 08    			LD		HL, (L08B1)							;START IN HL
0827   0304 AF          			XOR		A									;CLEAR A
0828   0305 86          L0305:		ADD		A, (HL)								;ADD CHECKSUM
0829   0306 23          			INC		HL
0830   0307 10 FC       			DJNZ	L0305								;UNTIL B=0
0831   0309 21 B5 08    			LD		HL, L08B5							;POINT TO REQUIRED CHECKSUM
0832   030C BE          			CP		(HL)								;TEST FOR EQUAL
0833   030D C0          			RET		NZ									;ABORT IF NOT
0834   030E 2A B6 08    			LD		HL, (L08B6)							;ELSE GET START ADDR
0835   0311 E9          			JP		(HL)								;AND DO RESET PATCH
0836   0312             
0837   0312             ;STEPPER ROUTINE
0838   0312             ;THE STEPPER ROUTINE IS BROKEN UP INTO SEVERAL SECTIONS. THE FIRST IS THE REGISTER SAVE,
0839   0312             ;WHERE ALL THE Z80 USER REGISTERS ARE STORED IN MEMORY.
0840   0312             
0841   0312 22 70 08    L0312:		LD		(L0870), HL				;STORE HL IN ITS REGISTER STACK SPOT
0842   0315 21 44 03    			LD		HL, L0344				;LOAD HL WITH RETURN ADDRESS - Was 0x0344
0843   0318             
0844   0318             ;MONITOR JUMPS TO HERE ON RESET TO PRESERVE USER REGISTERS.
0845   0318 22 60 08    L0318:		LD		(L0860), HL							;STORE RE-ENTRY ADDRESS IN BUFFER
0846   031B 2A 58 08    			LD		HL, (L0858)							;GET ADDRESS OF INSTRUCTION JUST
0847   031E 22 68 08    			LD		(L0868), HL							;STEPPED AND PUT IT IN "NEXT PC"
0848   0321 ED 73 7E 08 			LD		(L087E), SP							;BUFFER: SAVE STACK POINTER VALUE
0849   0325 E1          			POP		HL									;GET RETURN ADDR, THIS IS THE ADDRESS
0850   0326 22 58 08    			LD		(L0858), HL							;OF NEXT BYTE TO STEP: STORE IN
0851   0329 31 7E 08    			LD		SP, L087E							;"NEXT PC" BUFFER: LOAD REGISTER DUMP
0852   032C 08          			EX		AF, AF'								;STACK: PUSH ALTERNATE REGISTERS
0853   032D D9          			EXX											;FIRST
0854   032E E5          			PUSH	HL									;SAVE ALL REGISTERS
0855   032F D5          			PUSH	DE
0856   0330 C5          			PUSH	BC
0857   0331 F5          			PUSH	AF
0858   0332 FD E5       			PUSH	IY
0859   0334 DD E5       			PUSH	IX
0860   0336 08          			EX		AF, AF'
0861   0337 D9          			EXX
0862   0338 3B          			DEC		SP
0863   0339 3B          			DEC		SP
0864   033A D5          			PUSH	DE
0865   033B C5          			PUSH	BC
0866   033C F5          			PUSH	AF
0867   033D 2A 60 08    			LD		HL, (L0860)							;RE-ENTER CALLING ROUTINE VIA
0868   0340 E9          			JP		(HL)								;THE ADDRESS IT SUPPLIED AT 0860
0869   0341 31 6A 08    			LD		SP, L086A							;SHIFT 7 ROUTINE START (REG DISPLAY)
0870   0344             
0871   0344             ;THE REGISTERS HAVE BEEN SAVED. NOW THE DISPLAY AND KEYBOARD HANDLER IS SET UP. THE STACK
0872   0344             ;IS DECREMENTED BY TWO TO POINT TO THE "PC" BUFFER. THE ADDRESS IN THE "PC" BUFFER IS THE
0873   0344             ;ADDRESS OF THE INSTRUCTION JUST STEPPED.
0874   0344             ;THE NUMBER OF THE FIRST REGISTER (1 FOR "PC") IS PUT INTO THE CURRENT REGISTER NUMBER
0875   0344             ;BUFFER.
0876   0344             
0877   0344 21 06 08    L0344:		LD		HL, L0806							;CREATE NEW DISPLAY BUFFER
0878   0347 22 2C 08    			LD		(L082C), HL							;
0879   034A 3B          			DEC		SP									;DECREASE SP BY 2 TO POINT TO THE
0880   034B 3B          			DEC		SP									;"PC" BUFFER
0881   034C             
0882   034C             ;WHEN UP-DATING THE DISPLAY, THE ROUTINE MAY JUMP BACK TO HERE IF THE FIRST DISPLAY IS REQUIRED.
0883   034C 3E 01       L034C:		LD		A, 0x01								;SET UP FOR THE FIRST REGISTER (PC)
0884   034E 32 5A 08    			LD		(L085A), A							;DISPLAY
0885   0351             
0886   0351             ;OR HERE IF IT HAS ALTERED THE CURRENT REGISTER NUMBER IN ITS STORAGE LOCATION (085A).
0887   0351 3A 5A 08    L0351:		LD		A, (L085A)							;DISPLAY LOOP STARTS HERE
0888   0354             
0889   0354             ;HL IS LOADED WITH THE STACK POINTER VALUE, (WHICH POINTS TO THE "PC" BUFFER), MINUS TWO.
0890   0354             ;THE TWO IS SUBTRACTED BECAUSE AN EXTRA TWO WILL BE ADDED TO HL DURING THE REGISTER BUFFER
0891   0354             ;CALCULATOR (IMMEDIATELY BELOW) AS THE NUMBER OF THE FIRST REGISTER IS 1 AND NOT ZERO.
0892   0354 21 FE FF    			LD		HL, 0xFFFE							;HL=-2
0893   0357 39          			ADD		HL, SP								;HL=SP-2
0894   0358 23          L0358:		INC		HL									;INCREMENT HL TO POINT TO THE
0895   0359 23          			INC		HL									;CURRENT REGISTER BUFFER
0896   035A 3D          			DEC		A									;INDICATED BY THE NUMBER IN A
0897   035B 20 FB       			JR		NZ, L0358
0898   035D             
0899   035D             ;HL NOW POINTS TO THE CURRENT REGISTER BUFFER. THIS SECTION PUTS THE REGISTER(S) CONTENT(S)
0900   035D             ;INTO HL AND CONVERTS IT TO DISPLAY CODE AND STORE THE DISPLAY CODE IN THE DISPLAY BUFFER.
0901   035D             
0902   035D 7E          			LD		A, (HL)								;GET 16 BIT VALUE
0903   035E 23          			INC		HL									;AND PUT IT
0904   035F 66          			LD		H, (HL)								;BACK INTO
0905   0360 6F          			LD		L, A								;HL
0906   0361 ED 4B 2C 08 			LD		BC, (L082C)							;PUT DISPLAY BUFFER ADDRESS IN BC
0907   0365 CD 30 08    			CALL	L0830								;CALL HL TO DISPLAY CODE ROUTINE
0908   0368             
0909   0368             ;THIS SECTION CALCULATES THE ADDRESS OF THE REGISTER NAME FOR THE DATA DISPLAYS. THESE
0910   0368             ;ARE STORED IN A TABLE. THE REQUIRED REGISTER NAME IS THEN TRANSFERRED TO THE DISPLAY
0911   0368             ;BUFFER.
0912   0368             
0913   0368 3A 5A 08    			LD		A, (L085A)							;GET REGISTER NUMBER
0914   036B C5          			PUSH	BC									;PUT NEXT DISPLAY BUFFER
0915   036C D1          			POP		DE									;LOCATION INTO DE(stination)
0916   036D 01 02 00    			LD		BC, 0x0002							;BC IS THE NUMBER OF DATA DISPLAYS
0917   0370 21 92 07    			LD		HL, L0792							;HL=THE BASE OF THE NAME TABLE
0918   0373 09          L0373:		ADD		HL, BC								;ADD TO HL 2 FOR EACH
0919   0374 3D          			DEC		A									;REGISTER NUMBER TO ACCESS THE
0920   0375 20 FC       			JR		NZ, L0373							;CURRENT REGISTER NAME
0921   0377 ED B0       			LDIR										;MOVE REGISTER NAME INTO RAM
0922   0379             
0923   0379             ;THE SCAN AND KEYBOARD ROUTINE ARE NOW CALLED (VIA THE RST 18). IF A VALID KEY IS PRESSED,
0924   0379             ;THEN THE ZERO FLAG IS SET WHEN THE RST RETURNS.
0925   0379             
0926   0379 DF          L0379:		RST		18H									;SCAN/KEY READ RST
0927   037A 21 24 08    			LD		HL, L0824							;(HL)=AUTO STEP CONTROL/TIMER BYTE
0928   037D 28 0B       			JR		Z, L038A							;JUMP IF VALID KEY PRESSED
0929   037F             
0930   037F             ;NO KEY IS PRESSED SO THE ROUTINE CHECKS FOR THE AUTO REPEAT MODE ENABLED FLAG (BIT 7 AUTO
0931   037F             ;STEP CONTROL/TIMER BYTE, ZERO IS AUTO STEP ENABLED) AND DECREMENTS THE COUNTER IF IT IS.
0932   037F             ;IF THE COUNTER REACHES ZERO, THEN IT IS RELOADED AND THE ROUTINE JUMPS TO RECOVER THE
0933   037F             ;REGISTERS AND STEP THE NEXT INSTRUCTION. IF NOT IN THE AUTO MODE OR THE COUNTER DOES NOT
0934   037F             ;REACH ZERO, THEN THE ROUTINE LOOPS BACK TO SCAN THE DISPLAY AND WAIT FOR EITHER A KEY
0935   037F             ;PRESS OR FOR THE COUNTER TO REACH ZERO.
0936   037F             
0937   037F CB 7E       			BIT		7, (HL)								;TEST FOR AUTO INCREMENT JUMP IF NOT
0938   0381 20 F6       			JR		NZ, L0379							;ENABLED TO SCAN/KEY READ LOOP
0939   0383 35          			DEC		(HL)								;DECREMENT COUNTER: LOOP TO
0940   0384 20 F3       			JR		NZ, L0379							;SCAN/KEY READ UNTIL COUNT=0
0941   0386             
0942   0386             ;AT THIS POINT THE AUTO-STEP DELAY HAS REACHED ZERO AND IS RELOADED WITH THE DELAY VALUE.
0943   0386             ;A JUMP IS THEN DONE TO RECOVER THE REGISTERS AND STEP THE NEXT INSTRUCTION.
0944   0386 36 30       			LD		(HL), 0x0030						;RESET AUTO STEP DELAY, JUMP TO RECOVER
0945   0388 18 22       			JR		L03AC								;REGISTERS AND STEP NEXT INSTRUCTION
0946   038A             
0947   038A             ;KEY PROCESSING STARTS HERE
0948   038A             ;THE AUTO-STEP IS DISABLED AND THEN THE KEY IS IDENTIFIED AND HANDLED.
0949   038A             ;THE AUTO-STEP WILL BE RE-ENABLED IF THE KEY PRESSED IS A DATA KEY.
0950   038A             
0951   038A 47          L038A:		LD		B, A								;SAVE KEY
0952   038B 36 FF       			LD		(HL), 0x00FF						;SET AUTO STEP CONTROL/TIMER BIT 7
0953   038D 21 5A 08    			LD		HL, L085A							;THUS DISABLING THE AUTO REPEAT MODE
0954   0390 78          			LD		A, B								;POINT HI, TO CURRENT REG No. BUFFER
0955   0391 FE 10       			CP		0x10								;PUT INPUT IN A,TEST IT FOR "+"
0956   0393 20 08       			JR		NZ, L039D							;JUMP IF NOT TO TEST FOR "-"
0957   0395             
0958   0395             ;"+" KEY HANDLER
0959   0395             ;THE CURRENT REGISTER NUMBER IS INCREMENTED AND THEN CHECK TO SEE THAT IT HAS NOT EXCEEDED
0960   0395             ;THE HIGHEST REGISTER NUMBER (OC). IF IT HAS, THE ROUTINE JUMPS TO RESET THE CURRENT
0961   0395             ;REGISTER NUMBER WITH 1, OTHERWISE IT JUMPS TO THE DISPLAY LOOP.
0962   0395             
0963   0395 34          			INC		(HL)								;INCREMENT REGISTER NUMBER
0964   0396 7E          			LD		A, (HL)								;AND CHECK TO SEE IF IT LARGER
0965   0397 FE 0D       			CP		0x0D								;THAN HIGHEST REG No. (0C): IF LOWER
0966   0399 38 B6       			JR		C, L0351							;THAN OD JUMP TO DISPLAY LOOP ELSE
0967   039B 18 AF       			JR		L034C								;JUMP TO SET REGISTER NUMBER TO 1
0968   039D FE 11       L039D:		CP		11H									;TEST FOR "-"
0969   039F 20 07       			JR		NZ, L03A8							;JUMP IF NOT
0970   03A1             
0971   03A1             ;"-" HANDLER
0972   03A1             ;ONE IS TAKEN FROM THE CURRENT REGISTER NUMBER AND THEN IT IS CHECKED FOR ZERO. IF IT
0973   03A1             ;BECOMES ZERO, THEN THE CURRENT REGISTER NUMBER IS SET TO THE HIGHEST REGISTER NUMBER (OC)
0974   03A1             ;TO WRAP-AROUND TO DISPLAY THE LAST REGISTER.
0975   03A1 35          			DEC		(HL)								;SUBTRACT 1 FROM REGISTER NUMBER
0976   03A2 20 AD       			JR		NZ, L0351							;JUMP IF NOT 0 TO UP-DATE DISPLAY
0977   03A4 36 0C       			LD		(HL), 0x0C							;ELSE SET TO LAST REGISTER
0978   03A6 18 A9       			JR		L0351								;AND UP-DATE
0979   03A8             
0980   03A8             ;TEST FOR "GO"
0981   03A8 FE 12       L03A8:		CP		0x12								;TEST FOR "GO" AND JUMP IF NOT
0982   03AA 20 1A       			JR		NZ, L03C6							;TO TEST FOR "AD" OR DATA KEY
0983   03AC             
0984   03AC             ;"GO" KEY
0985   03AC             ;THE GO KEY CAUSES STEPPING EXECUTION TO CONTINUE.
0986   03AC             ;BEFORE STEPPING IS CONTINUED THOUGH, THE KEYBOARD IS READ AND THE PROGRAM LOOPS UNTIL
0987   03AC             ;ALL KEYS ARE RELEASED. THIS IS TO SEPARATE KEY PRESSES MEANT FOR THE STEPPER AND THOSE
0988   03AC             ;FOR THE ROUTINE BEING STEPPED. ONCE ALL KEYS ARE RELEASED, ALL THE REGISTERS ARE POPPED
0989   03AC             ;OF THE REGISTER DISPLAY STACK, THE STACK IS RESTORED TO ITS "REAL" POSITION AND THE
0990   03AC             ;INTERRUPTS RE-ENABLED. THE RETURN ADDRESS FOR THE ROUTINE BEING STEPPED, STILL THERE ON
0991   03AC             ;THE TOP OF THE REAL STACK, IS USED AS THE RETURN ADDRESS.
0992   03AC             
0993   03AC E7          L03AC:		RST		20H									;WAIT UNTIL ALL KEYS ARE RELEASED
0994   03AD 28 FD       			JR		Z, L03AC							;BEFORE RESTARTING
0995   03AF E1          			POP		HL									;RECOVER ALL
0996   03B0 F1          			POP		AF									;REGISTERS
0997   03B1 C1          			POP		BC									;IN
0998   03B2 D1          			POP		DE									;THE
0999   03B3 E1          			POP		HL									;REVERSE
1000   03B4 DD E1       			POP		IX									;ORDER
1001   03B6 FD E1       			POP		IY									;TO
1002   03B8 08          			EX		AF, AF'								;HOW
1003   03B9 D9          			EXX											;THEY
1004   03BA F1          			POP		AF									;STORED
1005   03BB C1          			POP		BC
1006   03BC D1          			POP		DE
1007   03BD E1          			POP		HL
1008   03BE 08          			EX		AF, AF'
1009   03BF D9          			EXX
1010   03C0 ED 7B 7E 08 			LD		SP, (L087E)							;AND STACK POINTER
1011   03C4 FB          			EI											;RE-ENABLE THE INTERRUPTS
1012   03C5 C9          			RET											;RET TO STEP NEXT INSTRUCTION
1013   03C6             
1014   03C6             ;TEST FOR "AD" KEY (RETURN TO JMON)
1015   03C6 FE 13       L03C6:		CP		0x13								;TEST FOR "ADDR" KEY
1016   03C8 20 01       			JR		NZ, L03CB							;JUMP IF NOT TO ASSUME DATA KEY
1017   03CA C7          			RST		00H									;RETURN TO MONITOR
1018   03CB             
1019   03CB             ;DATA KEY HANDLER (ENABLE AUTO STEP)
1020   03CB 3E 20       L03CB:		LD		A, 0x20								;SET AND ENABLE AUTO STEP IN THE
1021   03CD 32 24 08    			LD		(L0824), A							;CONTROL/TIMER BYTE (BIT 7 LOW, 20
1022   03D0 18 A7       			JR		L0379								;CYCLES): JUMP TO DISPLAY LOOP
1023   03D2             ;-END OF STEPPER-
1024   03D2             
1025   03D2             ;START OF MENU
1026   03D2             ;MENU IS SET-UP FOR TAPE ROUTINE HERE
1027   03D2             ;THE VARIABLES ARE MOVED FROM ROM TO RAM AND THE DISPLAY BUFFER IS SET TO 0800.
1028   03D2             
1029   03D2 21 7C 07    			LD		HL, 077CH							;LOAD HL WITH START OF TAPE
1030   03D5 11 80 08    			LD		DE, 0880H							;VARIABLES: DE IS RAM DE(stination)
1031   03D8 01 18 00    			LD		BC, 0018H							;BC IS THE COUNT
1032   03DB ED B0       			LDIR										;SHIFT VARIABLES
1033   03DD 21 00 08    L03DD:		LD		HL, 0800H							;PUT DISPLAY BUFFER AT 0800
1034   03E0 22 2C 08    			LD		(L082C), HL
1035   03E3             
1036   03E3             ;MENU DISPLAY LOOP STARTS HERE
1037   03E3             ;THE MENU ENTRY NUMBER (MEN), HOLDS THE NUMBER OF THE CURRENT MENU ENTRY ON THE DISPLAY.
1038   03E3             ;ALL ACTIONS OF THE MENU DRIVER CENTRE AROUND THIS BYTE.
1039   03E3             ;THE DISPLAY ON THE TEC LED DISPLAY IS GENERATED BY SHIFTING BOTH THE DATA AND ADDRESS
1040   03E3             ;DISPLAY CODES INTO THE RAM DISPLAY BUFFER.
1041   03E3             ;ALL THE POSSIBLE DATA AND ADDRESS DISPLAY CODES ARE STORED IN SEPARATE TABLES IN ROM,
1042   03E3             ;THE BASE OF EACH IS ADDRESSED BY THE CONTENTS OF MEMORY LOCATIONS 0895 (DATA TABLE), AND
1043   03E3             ;0893 (ADDRESS TABLE).
1044   03E3             ;THE FIRST MENU ENTRY IS DENOTED BY A ZERO VALUE IN THE MENU ENTRY NUMBER (MEN). THIS
1045   03E3             ;MEANS THAT THE POSSIBLE ZERO CONDITION MUST BY DETECTED AND THE TABLE ENTRY CALCULATOR
1046   03E3             ;SECTION SKIPPED OVER. WHEN ACCESSING THE DISPLAY TABLES, THE MENU ENTRY NUMBER IS
1047   03E3             ;DECREMENTED UNTIL ZERO AND EACH TIME AN OFFSET EQUAL TO THE LENGTH OF EACH TABLE ENTRY
1048   03E3             ;(4 FOR ADDR AND 2 FOR DATA TABLES) IS ADDED TO THE POINTERS.
1049   03E3             ;AFTER THE REQUIRED ENTRIES ARE FOUND, THEY ARE MOVED INTO THE RAM DISPLAY BUFFER.
1050   03E3             
1051   03E3 3A 8F 08    L03E3:		LD		A, (L088F)							;GET MENU ENTRY NUMBER (MEN)
1052   03E6 ED 5B 95 08 L03E6:		LD		DE, (L0895)							;DE POINTS TO DATA DISPLAY TABLE
1053   03EA 2A 93 08    			LD		HL, (L0893)							;HL POINTS TO ADDR DISPLAY TABLE
1054   03ED 01 04 00    L03ED:		LD		BC, 0004H							;BC IS BOTH AN INDEX OFFSET AND
1055   03F0 B7          			OR		A									;BYTE COUNTER (USED BELOW): TEST
1056   03F1 28 06       			JR		Z, L03F9							;A AND SKIP CALCULATOR IF ZERO
1057   03F3 09          L03F3:		ADD		HL, BC								;ADD 4 TO HL TO POINT TO NEXT ADDR
1058   03F4 13          			INC		DE									;DISPLAY AND 2 TO DE FOR NEXT DATA
1059   03F5 13          			INC		DE									;DISPLAY
1060   03F6 3D          			DEC		A									;DO UNTIL A=0
1061   03F7 20 FA       			JR		NZ, L03F3
1062   03F9 E5          L03F9:		PUSH	HL									;SAVE ADDR POINTER (not required)
1063   03FA D5          			PUSH	DE									;AND DATA POINTER
1064   03FB 11 00 08    			LD		DE, L0800							;SHIFT ACROSS ADDR DISPLAY
1065   03FE ED B0       			LDIR										;TO 0800 (LC-0004 FROM ABOVE)
1066   0400 E1          			POP		HL									;POP DATA DISPLAY ADDR INTO HL
1067   0401 0E 02       			LD		C, 0x02								;SET PC TO SHIFT DATA DISPLAY BYTES
1068   0403 ED B0       			LDIR										;SHIFT THE BYTES TO DISPLAY RAM
1069   0405 E1          			POP		HL									;CLEAN UP STACK
1070   0406             
1071   0406             ;THIS SECTION CALLS THE SCAN/KEY/LCD/PATCH ROUTINE.
1072   0406             ;WHEN A KEY IS DETECTED A KEY HANDLER ROUTINE IS CALLED. THIS KEY HANDLER IS COMMON TO
1073   0406             ;BOTH THE MENU DRIVER AND THE PERIMETER HANDLER AND IS DOCUMENTED ON FURTHER.
1074   0406             ;IF THE "GO" KEY WAS PRESSED, THE ZERO FLAG WILL BE SET WHEN THE COMMON KEY HANDLER RETURNS
1075   0406             ;AND THE ROUTINE JUMPS TO THE GO HANDLER. IF NOT, THEN A (UNUSED BY JMON) ROUTINE (AT
1076   0406             ;0897) IS CALLED AND FINDS AN IMMEDIATE RETURN.
1077   0406             ;THE RETURN INSTRUCTION WAS PLACED AT 0897 WHEN THE TAPE'S MENU VARIABLES WERE SHIFTED
1078   0406             ;FROM ROM TO RAM (SEE 0793).
1079   0406             ;A JUMP THEN LOOPS BACK TO THE MAIN DISPLAY LOOP TO UP-DATE THE DISPLAYS IN CASE OF A NEW
1080   0406             ;MENU ENTRY NUMBER (MEN) BEING PROVIDED BY THE KEY HANDLER.
1081   0406             ;THE GO HANDLER IS A SIMPLE TABLE ENTRY CALCULATOR THAT USES THE MENU ENTRY NUMBER TO
1082   0406             ;INDEX THROUGH A TABLE OF THREE BYTE JUMPS. LIKE THE DISPLAY CALCULATOR, THE ZERO POSSIBILITY
1083   0406             ;IS TESTED FOR AND THE CALCULATOR SECTION IS SKIPPED OVER IF ZERO. WHEN THE REQUIRED TABLE
1084   0406             ;ENTRY IS POINTED TO BY HL, IT IS THEN JUMPED TO VIA JP (HL), AND THE TABLE ENTRY,,,ITSELF
1085   0406             ;BEING A 3 BYTE JUMP THEN JUMPS TO THE SELECTED MENU ENTRY'S ROUTINE.
1086   0406             
1087   0406 CD 42 08    			CALL	L0842								;CALL SCAN/KEY/LCD/PATCH ROUTINE
1088   0409 21 8F 08    			LD		HL, L088F							;POINT HL TO MENU ENTRY NUMBER
1089   040C CD B2 04    			CALL	L04B2								;CALL COMMON KEY HANDLER
1090   040F 28 05       			JR		Z, L0416							;JUMP IF KEY WAS "GO" ELSE CALL TO
1091   0411 CD 97 08    			CALL	L0897								;RETURN INSTRUCTION (UNUSED BY JMON)
1092   0414 18 CD       			JR		L03E3								;LOOP TO MAIN DISPLAY LOOP
1093   0416             
1094   0416             ;MENU "GO" KEYHANDLER
1095   0416 2A 91 08    L0416:		LD		HL, (L0891)							;POINT HL TO BASE OF JUMP TABLE
1096   0419 3A 8F 08    			LD		A, (L088F)							;GET MENU ENTRY NUMBER
1097   041C B7          			OR		A									;TEST FOR ZERO
1098   041D 28 06       			JR		Z, L0425							;SKIP CALCULATOR IF ZERO
1099   041F 23          L041F:		INC		HL									;FIND JUMP VECTOR FOR THE CURRENT
1100   0420 23          			INC		HL									;MENU HEADING
1101   0421 23          			INC		HL
1102   0422 3D          			DEC		A
1103   0423 20 FA       			JR		NZ, L041F
1104   0425 E9          L0425:		JP		(HL)								;AND JUMP TO THE REQUIRED ROUTINE
1105   0426             
1106   0426             ;PERIMETER HANDLER SET-UP ROUTINES FOR THE TAPE SOFTWARE
1107   0426             ;WHEN GO IS PRESSED IN THE MENU HANDLER, ONE OF THE IMMEDIATE FOLLOWING ROUTINES IS EXECUTED
1108   0426             ;(WHEN THE MENU IS WORKING WITH THE TAPE SOFTWARE). THESE ROUTINES SET-UP THE VARIABLES
1109   0426             ;FOR THE MAIN TAPE FUNCTIONS (SAVE, TEST CS, TEST BL AND LOAD). THE TWO TESTS AND THE LOAD
1110   0426             ;ROUTINE IS BASICALLY THE ONE ROUTINE, EXCEPT THAT EACH HAS ITS OWN PRIVATE SIGN-ON BYTE.
1111   0426             ;LATER YOU WILL SEE THE THE ROUTINE TO LOAD OR TEST IS BASICALLY THE SAME AND THIS "SIGN-ON
1112   0426             ;BYTE" SEPARATES THE DIFFERENT FUNCTIONS AT THE CRITICAL STAGE.
1113   0426             ;THE COMMON SECTION FOR THE LOAD AND TESTS, SETS THE PERIMETER HANDLER TO HAVE TWO WINDOWS,
1114   0426             ;ONE FOR THE FILE NUMBER AND ONE FOR THE OPTIONAL START ADDRESS. IT ALSO SETS THE OPTIONAL
1115   0426             ;START WINDOW TO FFFF (NO OPTIONAL START ADDRESS BY DEFAULT) AND PUTS THE EXECUTING ADDRESS
1116   0426             ;OP THE LOAD/TESTS ROUTINE IN THE PERIMETER "GO" JUMP ADDRESS BUFFER.
1117   0426             ;THE SAVE SET-UP SETS THE NUMBER OF WINDOWS TO 4 AND STORES THE EXECUTING ADDRESS OF THE
1118   0426             ;SAVE PREAMBLE ROUTINE IN THE PERIMETER "GO" JUMP ADDRESS BUFFER (0888).
1119   0426             ;THE 4 TAPE SAVE WINDOWS ARE: THE FILE NUMBER, THE START, THE END AND THE OPTIONAL AUTO
1120   0426             ;GO ADDRESS.
1121   0426             ;ALL THE ABOVE ROUTINES HAVE A COMMON SET-UP AREA. THIS COMMON AREA STORES THE ROUTINE'S
1122   0426             ;JUMP ADDRESS, IN HL, AND THE NUMBER OF WINDOWS, IN A, BOTH PROVIDED FROM THEIR OWN
1123   0426             ;DEDICATED SECTION. THE COMMON AREA ALSO CLEARS THE "ACTIVE WINDOW NUMBER" TO ZERO SO THAT
1124   0426             ;THE PERIMETER HANDLER WILL BE ENTERED WITH THE FIRST WINDOW (FILE NUMBER) SHOWING.
1125   0426             
1126   0426             ;"LOAD" SET-UP
1127   0426 AF          			XOR		A									;CLEAR A FOR LOAD SIGN-ON BYTE
1128   0427             
1129   0427             ;COMMON AREA FOR LOAD AND TESTS
1130   0427 32 8A 08    L0427:		LD		(L088A), A							;SAVE SIGN-ON BYTE IN BUFFER
1131   042A 3E 01       			LD		A, 0x01								;LOAD A WITH NUMBER OF WANTED
1132   042C 21 FF FF    			LD		HL, 0xFFFF							;WINDOWS -1 (2 WINDOWS): SET
1133   042F 22 9A 08    			LD		(L089A), HL							;OPTIONAL START WINDOW TO FFFF
1134   0432 21 31 05    			LD		HL, 0x0531							;LOAD HL WITH "GO" ADDR OF LOAD/TEST
1135   0435 18 0D       			JR		L0444								;ROUTINE: JUMP TO STORE HL AND A
1136   0437             
1137   0437             ;"TEST BLOCK" SET-UP
1138   0437 3E 02       			LD		A, 0x02								;2=TEST BLOCK SIGN-ON BYTE
1139   0439 18 EC       L0439:		JR		L0427								;JUMP TO TEST/LOAD COMMON AREA
1140   043B             
1141   043B             ;"TEST CHECKSUM" SET-UP
1142   043B             
1143   043B 3E 03       			LD		A, 0x03								;3=TEST CHECKSUM SIGN-ON BYTE
1144   043D 18 FA       			JR		L0439								;JUMP TO TEST/LOAD COMMON AREA
1145   043F             
1146   043F             ;SAVE SET-UP
1147   043F 21 50 04    			LD		HL, 0x0450							;POINT HL TO START OF SAVE PRE-AMBLE
1148   0442 3E 03       			LD		A, 0x03								;SET UP FOR 4 WINDOWS
1149   0444             
1150   0444             ;COMMON AREA FOR ALL SET-UPS
1151   0444 22 88 08    L0444:		LD		(L0888), HL							;STORE HL AND A
1152   0447 32 87 08    			LD		(L0887), A
1153   044A AF          			XOR		A									;SET MEN TO FIRST WINDOW (FILE NUMBER)
1154   044B 32 86 08    			LD		(L0886), A
1155   044E 18 23       			JR		L0473								;JUMP TO PERIMETER HANDLER
1156   0450             
1157   0450             ;SAVE ROUTINE PRE-AMBLE
1158   0450             ;THE SAVE PREAMBLE FITS IN BETWEEN THE PERIMETER HANDLER AND THE ACTUAL SAVE ROUTINE. THE
1159   0450             ;PURPOSE OF IT IS TO SHIFT ACROSS THE FILE NUMBER, THE START ADDRESS AND THE OPTIONAL GO
1160   0450             ;ADDRESS. IT ALSO CALCULATES THE LENGTH OF THE BLOCK AND TRANSFERS IT ACROSS TO THE TAPE
1161   0450             ;FILE INFORMATION BLOCK WHICH IS OUTPUTTED TO THE TAPE.
1162   0450             ;IF THE END IS LOWER THAN THE START THE ROUTINE WILL JUMP TO DISPLAY "Err -In".
1163   0450             
1164   0450 2A 9E 08    			LD		HL, (L089E)							;SHIFT OPTIONAL GO TO OUTPUT BUFFER
1165   0453 22 AA 08    			LD		(L08AA), HL
1166   0456 2A 9A 08    			LD		HL, (L089A)							;SHIFT START ADDRESS OF BLOCK
1167   0459 22 A6 08    			LD		(L08A6), HL							;TO TAPE FILE OUTPUT BUFFER
1168   045C EB          			EX		DE, HL								;PUT START OF BLOCK IN DE
1169   045D 2A 9C 08    			LD		HL, (L089C)							;GET END OF BLOCK IN HL
1170   0460 B7          			OR		A									;CLEAR CARRY
1171   0461 ED 52       			SBC		HL, DE								;CALCULATE NUMBER OF BYTES IN
1172   0463 23          			INC		HL									;BLOCK (DIFFERENCE +1)
1173   0464 DA 4A 00    			JP		C, L004A							;JUMP IF CARRY TO "Err-In"
1174   0467 22 A8 08    			LD		(L08A8), HL							;STORE COUNT IN FILE INFO OUTPUT
1175   046A 2A 98 08    			LD		HL, (L0898)							;SHIFT FILE NUMBER TO
1176   046D 22 A4 08    			LD		(L08A4), HL							;TAPE FILE INFO OUTPUT BUFFER
1177   0470 C3 F0 04    			JP		L04F0								;JUMP TO SAVE OUTPUT ROUTINE
1178   0473             
1179   0473             ;FINAL TAPE SET-UP BEFORE THE PERIMETER HANDLER. THIS PLACES FFFF IN THE OPTIONAL GO WINDOW
1180   0473             ;BEFORE ENTERING THE PERIMETER HANDLER.
1181   0473             
1182   0473 21 FF FF    L0473:		LD		HL, 0xFFFF							;PUT FFFF IN OPTIONAL GO WINDOW
1183   0476 22 9E 08    			LD		(L089E), HL							;
1184   0479             
1185   0479             ;PERIMETER HANDLER
1186   0479             ;THE PERIMETER HANDLER ROUTINE IS SIMILAR TO THE MENU DRIVER. THE MAJOR DIFFERENCES ARELISTED BELOW:
1187   0479             ;THE PERIMETER HANDLER CREATES ITS OWN ADDRESS DISPLAY CODES BY CONVERTING THE CONTENTS
1188   0479             ;OF THE ACTIVE WINDOW TO DISPLAY CODE AND THEREFORE DOES NOT REQUIRE A TABLE OF ADDRESS DISPLAY CODES.
1189   0479             ;ANOTHER DIFFERENCE IS THE ADDRESS OF THE ROUTINE TO BE EXECUTED ON A "GO" PRESS IS SUPPLIED
1190   0479             ;BY THE CALLING ROUTINE. THEREFORE THE PERIMETER HANDLER DOESN'T REQUIRE A JUMP TABLE AND
1191   0479             ;ASSOCIATED CALCULATER.
1192   0479             ;THE ONLY OTHER MAJOR DIFFERENCE IS THAT THE PERIMETER HANDLER HAS ITS OWN BUILT IN DATA
1193   0479             ;KEY HANDLER WHILE THE MENU DOES NOT.
1194   0479             ;THE FRONT SECTION BELOW CALCULATES THE ADDRESS OF THE ACTIVE WINDOW AND THE ADDRESS OF
1195   0479             ;THE DATA DISPLAY FROM THE DISPLAY TABLE.
1196   0479             ;THE MENU ENTRY NUMBER FROM THE MENU DRIVER HAS AN EQUIVALENT HERE. IT IS THE ACTIVE WINDOW
1197   0479             ;NUMBER AND IS USEDIN IDENTICAL FASHION.
1198   0479             
1199   0479             .ORG		$0479
1200   0479 3A 86 08    L0479:		LD		A, (L0886)							;GET NUMBER OF ACTIVE WINDOW
1201   047C 2A 84 08    			LD		HL, (L0884)							;GET ADDRESS OF FIRST (FILE) WINDOW+1
1202   047F ED 5B 82 08 			LD		DE, (L0882)							;GET BASE OF DATA DISPLAY TABLE
1203   0483 B7          			OR		A									;TEST ACTIVE WINDOW NUMBER FOR ZERO
1204   0484 28 07       			JR		Z, L048D							;SKIP CALCULATOR IF ZERO
1205   0486 13          L0486:		INC		DE									;FINE CURRENT DATA DISPLAY
1206   0487 13          			INC		DE									;AND WINDOW
1207   0488 23          			INC		HL
1208   0489 23          			INC		HL
1209   048A 3D          			DEC		A
1210   048B 20 F9       			JR		NZ, L0486
1211   048D             
1212   048D             ;AFTER THE ADDRESS+1 OF THE ACTIVE WINDOW IS CALCULATED, IT IS STORED IN A BUFFER (AT
1213   048D             ;088C). EACH TIME A DATA KEY 1S PRESSED, HL IS LOADED FROM THIS BUFFER AND THEREFORE POINTS
1214   048D             ;TO THE ACTIVE WINDOW. THE DATA CAN THEN BE SHIFTED INTO THE ACTIVE WINDOW IMMEDIATELY.
1215   048D             
1216   048D 22 8C 08    L048D:		LD		(L088C), HL							;STORE ACTIVE WINDOW ADDRESS+l
1217   0490             
1218   0490             ;BELOW THE DATA DISPLAY BYTES ARE PUT INTO THE DATA SECTION OF THE DISPLAY BUFFER VIA HL.
1219   0490 EB          			EX		DE, HL								;PUT DATA DISPLAY ADDRESS IN HL
1220   0491 7E          			LD		A, (HL)								;GET RIGHT-HAND DISPLAY BYTE IN A
1221   0492 23          			INC		HL									;AND LEFT-HAND IN H
1222   0493 66          			LD		H, (HL)								;PUT RIGHT-HAND BYTE IN L
1223   0494 6F          			LD		L, A								;HL HOLDS THE DATA DISPLAY BYTES
1224   0495 22 04 08    			LD		(L0804), HL							;STORE DATA DISPLAY IN BUFFER
1225   0498             
1226   0498             ;BELOW THE 16 BIT CONTENTS OF THE ACTIVE WINDOW ARE CONVERTED TO DISPLAY CODE ARE PLACED
1227   0498             ;IN THE ADDRESS SECTION OF THE DISPLAY BUFFER.
1228   0498             
1229   0498 EB          			EX		DE, HL								;GET ACTIVE WINDOW ADDRESS FROM DE
1230   0499 7E          			LD		A, (HL)								;AND TRANSFER
1231   049A 2B          			DEC		HL									;THE 16 BIT CONTENTS OF THE ACTIVE
1232   049B 6E          			LD		L, (HL)								;WINDOW INTO HL
1233   049C 67          			LD		H, A								;READY TO COVERT TO DISPLAY CODE
1234   049D 01 00 08    			LD		BC, L0800							;BC=DISPLAY BUFFER START
1235   04A0 CD 30 08    			CALL	L0830								;CALL CONVERSION HL TO DISPLAY CODE
1236   04A3             
1237   04A3             ;THE DISPLAY BUFFER IS NOW SET-UP AND THE SCAN/KEY LOOP IS CALLED. WHEN A KEY IS PRESSED,
1238   04A3             ;A COMMON KEY HANDLER IS CALLED.
1239   04A3             ;THE COMMON KEY HANDLER DOES ALL THE REQUIRED PROCESSING FOR THE "+", "- " AND "AD" KEYS.
1240   04A3             ;IF EITHER THE "GO" OR A DATA KEY IS PRESSED, THEN THE HANDLER RETURNS WITH THE FLAGS SET
1241   04A3             ;TO SIGNIFY THESE KEYS.
1242   04A3             ;IF "GO" IS PRESSED THEN THE ZERO FLAG IS SET AND THE "GO" HANDLER BELOW IS EXECUTED. IF
1243   04A3             ;A DATA KEY IS PRESSED THEN THE ZERO FLAG IS CLEAR (NOT ZERO) AND CARRY FLAG IS CLEAR THE
1244   04A3             ;DATA KEY HANDLER IS EXECUTED IF THESE CONDITIONS ARE MET.
1245   04A3             
1246   04A3 CD 42 08    L04A3:		CALL	L0842								;CALL SCAN/KEY/LCD/PATCH ROUTINE
1247   04A6 21 86 08    			LD		HL, L0886							;POINT HL TO ACTIVE WINDOW NUMBER
1248   04A9 CD B2 04    			CALL	L04B2								;CALL COMMON KEY HANDLER
1249   04AC 20 16       			JR		NZ, L04C4							;JUMP IF NOT GO KEY TO TEST FOR DATA
1250   04AE 2A 88 08    			LD		HL, (L0888)							;OR CONTROL KEY: ELSE GET JUMP ADDRESS
1251   04B1 E9          			JP		(HL)								;STORED BY SET-UP AND GO
1252   04B2             
1253   04B2             ;COMMON KEY HANDLER
1254   04B2             ;BECAUSE THE PERIMETER HANDLER AND THE MENU DRIVER ARE VERY SIMILAR, THEY ARE ABLE TO
1255   04B2             ;SHARE A COMMON KEY HANDLER.
1256   04B2             ;THE ACTION OF THE KEY HANDLER IS AS FOLLOWS:
1257   04B2             ;IF THE "AD" KEY IS PRESSED, THEN THE RETURN ADDRESS IS POPPED OFF THE STACK AND A RETURN
1258   04B2             ;IS DONE TO THE CALLING ROUTINE (USUALLY JMON). IF THE "GO" KEY IS PRESSED, THEN THE ZERO
1259   04B2             ;FLAG WILL BE SET AND A RETURN DONE. IT IS THEN UP TO THE CALLING ROUTINE TO SERVICE THE
1260   04B2             ;"GO" KEY.
1261   04B2             ;A DATA KEY WILL BE FLAGGED BY SETTING THE CARRY FLAG AND CLEARING THE ZERO FLAG. LIKE
1262   04B2             ;THE "GO" KEY, THE CALLING ROUTINE MUST DECIDE WHAT IT IS TO DO WITH THE DATA KEY (THERE
1263   04B2             ;IS A BUILT IN DATA KEY HANDLER FOR THE PERIMETER HANDLER).
1264   04B2             ;IF EITHER THE "+" OR "-" KEYS ARE PRESSED THEN A SPECIAL ROUTINE IS CALLED. THIS ROUTINE
1265   04B2             ;WILL ALTER THE CURRENT NUMBER OF THE ACTIVE WINDOW OR MENU ENTRY. THE RESULT IS THAT WHEN
1266   04B2             ;THE DISPLAY IS UP-DATED, THE DISPLAYS WILL BE SHIFTED TO EITHER THE NEXT DISPLAY FOR "+"
1267   04B2             ;OR TO THE PREVIOUS ONE FOR "- " AND WRAP-AROUND IF REQUIRED.
1268   04B2             
1269   04B2 FE 10       L04B2:		CP		0x10								;IS THE KEY
1270   04B4 28 1B       			JR		Z, L04D1							;JUMP IF SO TO "+" HANDLER
1271   04B6 FE 11       			CP		0x11								;IS IT "-"
1272   04B8 28 17       			JR		Z, L04D1							;JUMP IF SO TO "-" HANDLER
1273   04BA FE 13       			CP		0x13								;IS IT "AD"
1274   04BC 20 02       			JR		NZ, L04C0							;JUMP IF NOT TO TEST FOR "GO"
1275   04BE E1          			POP		HL									;CLEAN UP STACK
1276   04BF C9          			RET											;RETURN TO JMON (OR CALLING ROUTINE)
1277   04C0 FE 12       L04C0:		CP		0x12								;IS IT "GO"
1278   04C2 3F          			CCF											;CLEAR CARRY IF NOT IF GO C=1 Z=1
1279   04C3 C9          			RET											;IF DATA SET Z=0 C=0: RETURN
1280   04C4             
1281   04C4             ;BELOW IS THE PERIMETER HANDLER DATA KEY HANDLER/DISCRIMINATOR
1282   04C4             ;IF THE KEY WAS "+" OR "-" THEN IT HAS ALREADY BEEN HANDLED AND THIS CONDITION IS FLAGGED
1283   04C4             ;BY THE CARRY BEING SET. IN THIS CASE, A JUMP IS DONE BACK TO THE MAIN BODY TO UP-DATE
1284   04C4             ;THE DISPLAY OTHERWISE THE DATA KEY VALUE IS SHIFTED INTO THE ACTIVE WINDOW.
1285   04C4             
1286   04C4 38 B3       L04C4:		JR		C, L0479							;JUMP IF KEY WAS "+" OR "-”
1287   04C6 2A 8C 08    			LD		HL, (L088C)							;POINT HL TO ACTIVE WINDOW+1
1288   04C9 2B          			DEC		HL									;POINT TO LOW ORDER BYTE
1289   04CA ED 6F       			RLD											;SHIFT IN DATA KEY VALUE
1290   04CC 23          			INC		HL									;AND SHIFT OTHER NIBBLES
1291   04CD ED 6F       			RLD											;ACROSS
1292   04CF 18 A8       			JR		L0479								;JUMP BACK TO UP-DATE DISPLAY
1293   04D1             
1294   04D1             ;THIS ROUTINE IS CALLED FROM THE COMMON KEY HANDLER IF EITHER "+" OR "-" HAVE BEEN PUSHED.
1295   04D1             ;THIS ROUTINE WILL EITHER INCREMENT OR DECREMENT THE MEMORY LOCATION ADDRESSED BY HL FOR
1296   04D1             ;THE "+" AND "-" KEY RESPECTIVELY. HL WAS LOADED BY THE CALLING ROUTINE TO POINT TO ITS
1297   04D1             ;MAIN CONTROLLING BYTE. THIS IS EITHER THE CURRENT MENU ENTRY NUMBER (MENU DRIVER), OR
1298   04D1             ;THE ACTIVE WINDOW NUMBER (PERIMETER HANDLER) , BOTH OF WHICH HAVE BEEN DESCRIBED PREVIOUSLY.
1299   04D1             ;AFTER INCREMENTING OR DECREMENTING (HL), THIS ROUTINE THEN CHECKS THAT THE VALUE IN (HL)
1300   04D1             ;IS NOT GREATER THAT THE BYTE AT HL+1 (WHICH IS THE MAXIMUM NUMBER OF DISPLAYS LESS 1).
1301   04D1             ;KEEP IN MIND, IF IT UNDERFLOWED FROM ZERO IT WILL BECOME FF AND BE HIGHER THAN (HL). THIS
1302   04D1             ;SECOND BYTE (AT HL+1) IS THE NUMBER OF ALLOWABLE DISPLAYS-1 AND WAS PROVIDED BY THE ROM
1303   04D1             ;TABLE FOR THE (TAPE) MENU DRIVER, AND PROVIDED BY THE PERIMETER HANDLER SET-UP ROUTINES
1304   04D1             ;(REFER TO 042A AND 0442).
1305   04D1             ;IF THE FIRST BYTE BECOMES HIGHER THAN THE SECOND., THEN THE ROUTINE CHECKS TO SEE WHICH
1306   04D1             ;KEY WAS PRESSED. IF THE "+" KEY WAS, THEN (HL) IS CLEARED. THIS WILL CAUSE MENU OR
1307   04D1             ;PERIMETER HANDLER TO SHOW ITS FIRST DISPLAY WHEN RE-ENTERED.
1308   04D1             ;IF THE KEY WAS "-", THEN THE MAXIMUM NUMBER OF DISPLAYS-1 (WHICH IS THE SAME AS THE NUMBER
1309   04D1             ;OF THE FINAL DISPLAY) IS TRANSFERRED INTO (HL) (THE NUMBER OF THE CURRENT DISPLAY). THIS
1310   04D1             ;WILL CAUSE THE LAST DISPLAY TO BE SHOWN WHEN THE MENU DRIVER OR PERIMETER HANDLER IS
1311   04D1             ;RE-ENTERED.
1312   04D1             ;IF THERE IS NO UNDERFLOW OR OVERFLOW THEN THE ROUTINE RETURNS JUST AFTER IT HAS EITHER
1313   04D1             ;INCREMENTED OR DECREMENTED THE CURRENT NUMBER OF THE MENU ENTRY NUMBER OR ACTIVE WINDOW
1314   04D1             ;NUMBER.
1315   04D1             ;WHEN THE MENU DRIVER OR PERIMETER HANDLER ARE RE-ENTERED, THEY WILL SHOW THE NEXT DISPLAY
1316   04D1             ;FOR "+" OR THE PREVIOUS FOR "-" AND WRAP-AROUND AUTOMATICALLY IF REQUIRED.
1317   04D1             
1318   04D1             .ORG		$04D1
1319   04D1 4F          L04D1:		LD		C, A								;SAVE INPUT KEY VALUE IN C
1320   04D2 23          			INC		HL									;PUT MAX NUMBER OF DISPLAYS-1
1321   04D3 46          			LD		B, (HL)								;IN B
1322   04D4 2B          			DEC		HL									;RESET HL TO POINT TO CURRENT NUMBER
1323   04D5 0F          			RRCA										;WAS KEY "+" OR "-"? BIT 0 WILL TELL
1324   04D6 7E          			LD		A, (HL)								;PUT CURRENT NUMBER IN A
1325   04D7 38 02       			JR		C, L04DB							;JUMP IF KEY WAS "-"
1326   04D9 3C          			INC		A									;INCREASE A BY 2
1327   04DA 3C          			INC		A									;
1328   04DB 3D          L04DB:		DEC		A									;DECREASE A BY ONE
1329   04DC 04          			INC		B									;ADD 1 TO MAX NUMBER-1: IS CURRENT
1330   04DD B8          			CP		B									;NUMBER EQUAL OR GREATER THAN MAX?
1331   04DE 30 05       			JR		NC, L04E5							;JUMP IF SO TO UNDER/OVERFLOW HANDLER
1332   04E0 77          L04E0:		LD		(HL), A								;ELSE STORE UPDATED CURRENT NUMBER
1333   04E1 AF          			XOR		A									;SET ZERO FLAG
1334   04E2 3D          			DEC		A									;CHANGE ZERO FLAG TO 0
1335   04E3 37          			SCF											;AND SET CARRY
1336   04E4 C9          			RET											;DONE
1337   04E5 CB 41       L04E5:		BIT		0, C								;TEST FOR "+" OR "-"
1338   04E7 20 03       			JR		NZ, L04EC							;JUMP IF "-" TO SET CURRENT NUMBER
1339   04E9 AF          			XOR		A									;TO LAST DISPLAY: ELSE SET FIRST
1340   04EA 18 F4       			JR		L04E0								;DISPLAY: JUMP TO STORE NEW NUMBER
1341   04EC 05          L04EC:		DEC		B									;CORRECT MAX NUMBER-1
1342   04ED 78          			LD		A, B								;SET A TO LAST DISPLAY NUMBER
1343   04EE 18 F0       			JR		L04E0								;JUMP TO STORE LAST DISPLAY NUMBER
1344   04F0             
1345   04F0             ;THIS IS THE TAPE OUTPUT ROUTINE
1346   04F0             ;THE ACTION IS AS FOLLOWS:
1347   04F0             ;A LEADER OF LOW FREQUENCY TONE IS OUTPUTTED FOLLOWED BY THE FILE INFORMATION BLOCK.
1348   04F0             ;AFTER THE FILE INFORMATION BLOCK IS OUTPUTTED, SEVERAL SECONDS OF HIGH FREQUENCY MIDDLE
1349   04F0             ;SYNC IS OUTPUTTED, THE TIME IT TAKES TO OUTPUT THE MIDDLE SYNC IS USED BY THE TAPE INPUT
1350   04F0             ;ROUTINE TO DISPLAY THE FILE NUMBER.
1351   04F0             ;THE DATA TO BE SAVED ON TAPE IS BROKEN UP INTO BLOCKS OF 256 BYTES AND OUTPUTTED WITH A
1352   04F0             ;CHECKSUM AT THE END OF EACH BLOCK. A COUNTER IS SHOWN ON THE TEC LED DISPLAY THAT SHOWS
1353   04F0             ;HOW MANY COMPLETE BLOCKS LEFT (UP TO 16 BLOCKS).
1354   04F0             ;IF THERE IS AN ODD SIZE BLOCK, IT IS OUTPUTTED AS THE LAST BLOCK.
1355   04F0             ;AFTER ALL THE BLOCKS HAVE BEEN OUTPUTTED, AN END OF FILE HIGH FREQUENCY TONE IS OUTPUTTED.
1356   04F0             
1357   04F0 21 00 30    L04F0:		LD		HL, 0x3000							;HL HAS NUMBER OF LEADER CYCLES
1358   04F3 CD 80 06    			CALL	L0680								;CALL LOW TONE
1359   04F6 21 A4 08    			LD		HL, 0x08A4							;HL IS START OF FILE INFORMATION BLOCK
1360   04F9 06 0C       			LD		B, 0x0C								;LOAD B WITH NUMBER OF BYTES TO BE
1361   04FB AF          			XOR		A									;OUTPUTTED: ZERO A FOR CHECKSUM
1362   04FC CD 4B 06    			CALL	L064B								;CALL OUT BLOCK
1363   04FF 21 00 50    			LD		HL, 0x5000							;LD HL WITH MID SYNC CYCLE COUNT
1364   0502 CD 84 06    			CALL	L0684								;CALL HIGH TONE
1365   0505 2A A6 08    			LD		HL, (L08A6)							;LOAD HL, WITH START OF OUTPUT BLOCK
1366   0508             
1367   0508             ;OUTPUT LOOP STARTS HERE
1368   0508             ;THE DISCUSSION BELOW ON THE BYTE COUNTER AND BLOCK FORMATION APPLIES TO THE TAPE INPUT
1369   0508             ;LOOP ALSO. THE TAPE INPUT LOOP DESCRIPTION WILL REFER YOU BACK TO THESE NOTES.
1370   0508             ;THE BYTE COUNT IS PUT INTO BC AND THEN A ROUTINE TO CONVERT B (THE TOTAL NUMBER OF FULL
1371   0508             ;BLOCKS TO BE OUTPUTTED) TO DISPLAY FORMAT AND OUTPUT IT IS CALLED.
1372   0508             ;THE CONVERSION ROUTINE ALSO TESTS B FOR ZERO. IF B IS NOT ZERO, THE ROUTINE RETURNS WITH
1373   0508             ;THE ZERO FLAG CLEAR (NOT ZERO) AND THE HIGH ORDER BYTE OF THE BYTE COUNT IN B IS DECREMENTED
1374   0508             ;BY ONE AND STORED IN ITS BUFFER. THIS COUNTS DOWN THE BLOCKS. B IS THEN ZEROED SO THAT
1375   0508             ;A FULL BLOCK (256 BYTES) WILL BE OUTPUTTED ON RETURNING.
1376   0508             ;IF THE HIGH ORDER BYTE OF THE BYTE COUNT (IN B) IS ZERO (NO FULL BLOCK OF 256 BYTES) THEN
1377   0508             ;C (THE LOW ORDER BYTE OF THE COUNT) IS TRANSFERRED INTO B AND THE ZERO FLAG IS SET.
1378   0508             ;THE CONVERSION THEN RETURNS WITH THE NUMBER (IF ANY) OF REMAINING BYTES IN B.
1379   0508             ;AFTER THE CONVERSION ROUTINE HAS RETURNED, A JUMP IS DONE IF THE ZERO FLAG IS CLEAR
1380   0508             ;(DENOTING A NOT ZERO STATE). THIS JUMP SKIPS AHEAD TO SAVE THE FLAGS AND OUTPUT ONE FULL
1381   0508             ;BLOCK
1382   0508             ;IF THE ZERO FLAG IS SET, THEN THE ROUTINE BELOW CHECKS TO SEE IF THE LOW ORDER BYTE (FROM
1383   0508             ;C) THAT HAS BEEN PLACED IN B, IS ZERO. IF THE LOW ORDER BYTE IS ZERO, THEN ALL THE BYTES
1384   0508             ;HAVE BEEN OUTPUTTED. THE ROUTINE THEN JUMPS TO DISPLAY " -END -S".
1385   0508             ;IF THE LOW ORDER BYTE OF THE COUNT IS NOT ZERO THEN THE ZERO FLAG IS SET AND SAVED ON
1386   0508             ;THE STACK BEFORE WHAT ARE NOW KNOWN TO BE THE LAST IS OUTPUTTED.
1387   0508             ;BEFORE THE DATA IS SENT TO THE TAPE, A SHORT HIGH TONE SYNC IS OUTPUTTED TO COVER THE
1388   0508             ;SOFTWARE OVERHEAD OF THE TAPE INPUT ROUTINE, AND A IS ZEROED TO BE USED AS THE CHECK-SUM.
1389   0508             
1390   0508 ED 4B A8 08 L0508:		LD		BC, (L08A8)							;LOAD BC WITH NUMBER OF BYTES
1391   050C CD C9 05    			CALL	L05C9								;CALL ROUTINE TO DISPLAY BLOCK COUNT
1392   050F 20 05       			JR		NZ, L0516							;AND TEST LENGTH: JUMP IF FULL BLOCK
1393   0511 78          			LD		A, B								;TO OUTPUT: TEST LOW BYTE OF COUNT
1394   0512 B7          			OR		A									;IN B IS ZERO AND JUMP TO DISPLAY
1395   0513 28 11       			JR		Z, L0526							;"-END-S" IF SO
1396   0515             
1397   0515             ;THE XOR A INSTRUCTION BELOW SETS THE ZERO FLAG TO SIGNIFY THAT THE BLOCK ABOUT TO BE
1398   0515             ;OUTPUTTED IS THE FINAL BLOCK. THE ROUTINE WILL THEN DISPLAY "-END-S" (AFTER A SHORT END
1399   0515             ;SYNC TONE).
1400   0515             
1401   0515 AF          			XOR		A									;SET ZERO FLAG
1402   0516 F5          L0516:		PUSH	AF									;AND SAVE ON STACK
1403   0517             
1404   0517             ;AT THIS POINT IF THE ZERO FLAG ON THE STACK IS CLEAR (NOT ZERO STATE), THEN AFTER THE
1405   0517             ;CURRENT BLOCK IS OUTPUTTED, THE ROUTINE WILL LOOP BACK TO START OF THE OUTPUT LOOP TO
1406   0517             ;SEE IF THERE IS ANY MORE BYTES TO BE OUTPUTTED.
1407   0517 D9          			EXX											;SWAP REGISTERS
1408   0518 21 14 02    			LD		HL, 0x0214							;LOAD HL FOR SHORT BURST OF
1409   051B CD 84 06    			CALL	L0684								;HIGH TONE
1410   051E D9          			EXX											;SWAP BACK REGISTERS
1411   051F AF          			XOR		A									;ZERO A FOR CHECKSUM
1412   0520 CD 4B 06    			CALL	L064B								;CALL OUTBLOCK
1413   0523 F1          			POP		AF									;RECOVER FLAGS AND JUMP IF
1414   0524 20 E2       			JR		NZ, L0508							;THERE MIGHT BE MORE TO OUTPUT
1415   0526             
1416   0526             ;ALL BLOCKS HAVE BEEN OUTPUTTED SO FINISH WITH A SHORT END TONE AND SET-UP END DISPLAY "-END-S".
1417   0526 21 00 10    L0526:		LD		HL, 0x1000							;LOAD HL WITH SHORT END TONE
1418   0529 CD 84 06    			CALL	L0684								;CALL HIGH TONE
1419   052C 3E 05       			LD		A, 0x05								;LD A TO INDEX "END-S DISPLAY
1420   052E C3 E6 03    			JP		L03E6								;JUMP BACK TO MENU
1421   0531             
1422   0531             ;THIS IS THE START OF THE TAPE INPUT SECTION.
1423   0531             ;THE ACTION HERE IS TO DETECT A VALID LEADER BY COUNTING 1000H CYCLES OF LOW FREQUENCY
1424   0531             ;TONE. AFTER THIS HAS BEEN DETECTED, THE ROUTINE WAITS UNTIL IT DETECTS THE START BIT OF
1425   0531             ;THE FILE INFORMATION BLOCK. THE BLOCK IS THEN LOADED IN AND A CHECK-SUM COMPARE IS DONE.
1426   0531             ;IF AN ERROR IS DETECTED, THE ROUTINE JUMPS TO DISPLAY "FAIL -XX", OTHERWISE THE FILE
1427   0531             ;NUMBER IS CONVERTED TO DISPLAY FORMAT AND DISPLAYED FOR A FEW SECONDS.
1428   0531             
1429   0531 01 00 10    L0531:		LD		BC, 0x1000							;LOAD BC TO COUNT 0x1000 CYCLES
1430   0534 CD 30 06    L0534:		CALL	L0630								;CALL PERIOD
1431   0537 38 F8       			JR		C, L0531							;LOOP UNTIL LOW TONE IS DETECTED
1432   0539 0B          			DEC		BC									;COUNT LONG
1433   053A 78          			LD		A, B								;PERIODS
1434   053B B1          			OR		C									;IF BC REACHES ZERO THEN IT IS
1435   053C 20 F6       			JR		NZ, L0534							;ACCEPTED THAT A VALID FILE FOLLOWS
1436   053E 06 0C       			LD		B, 0x0C								;LOAD B TO INPUT 12 BYTES AND
1437   0540 21 A4 08    			LD		HL, 0x08A4							;POINT HL TO FILE INFO BLOCK INPUT
1438   0543 CD 30 06    L0543:		CALL	L0630								;BUFFER: CALL PERIOD
1439   0546 30 FB       			JR		NC, L0543							;AND WAIT FOR LOW TONE TO END
1440   0548 CD E7 05    			CALL	L05E7								;CALL INBLOCK TO GET FILE INFO BLOCK
1441   054B 20 54       			JR		NZ, L05A1							;JUMP NOT ZERO TO FAIL LOAD ROUTINE
1442   054D 01 00 08    			LD		BC, 0x0800							;LOAD BC TO POINT TO DISPLAY BUFFER
1443   0550 2A A4 08    			LD		HL, (L08A4)							;PUT FILE NUMBER INTO EL
1444   0553 CD 30 08    			CALL	L0830								;CONVERT HL TO DISPLAY CODE
1445   0556 3E 47       			LD		A, 0x47								;PUT "F" IN DISPLAY BUFFER
1446   0558 32 05 08    			LD		(L0805), A							;FOR "FILE"
1447   055B 01 F2 01    			LD		BC, 0x01F2							;LD BC WITH THE DISPLAY ON TIME
1448   055E C5          L055E:		PUSH	BC									;SAVE ON STACK
1449   055F CD 36 08    			CALL	L0836								;CALL SCAN
1450   0562 C1          			POP		BC									;RECOVER BC
1451   0563 0B          			DEC		BC									;DECREMENT
1452   0564 78          			LD		A, B								;AND LOOP UNTIL
1453   0565 B1          			OR		C									;BC IS ZERO
1454   0566 20 F6       			JR		NZ, L055E
1455   0568             
1456   0568             ;AFTER A FILE INFORMATION BLOCK IS LOADED AND THE FILE NUMBER DISPLAYED, A TEST IS DONE
1457   0568             ;ON THE REQUIRED FILE NUMBER WINDOW. FIRST IT IS TESTED FOR FFFF (LOAD/TEST NEXT FOUND
1458   0568             ;FILE). IF FFFF, THE ROUTINE SKIPS AHEAD TO LOAD/TEST THE FILE. OTHERWISE THE REQUIRED
1459   0568             ;FILE NUMBER IS SUBTRACTED FROM THE JUST LOADED FILE NUMBER, IF THE RESULT IS ZERO THEN
1460   0568             ;THE FILE IS THE ONE SELECTED AND IS LOADED/TESTED.
1461   0568             ;THE OPTIONAL START WINDOW IS THEN TESTED FOR FFFF. IF IT IS, THE START ADDRESS FROM THE
1462   0568             ;TAPE IS USED. IF THE OPTIONAL START BUFFER HAS SOMETHING OTHER THAT FFFF, THEN THE ADDRESS
1463   0568             ;HERE IS USED AS THE START ADDRESS TO LOAD/TEST THE TAPE.
1464   0568             
1465   0568 2A 98 08    			LD		HL, (L0898)							;TEST FOR FFFF IN FILE NAME WINDOW
1466   056B 23          			INC		HL
1467   056C 7C          			LD		A, H
1468   056D B5          			OR		L
1469   056E 2B          			DEC		HL									;JUMP IF FILE WINDOW IS FFFF
1470   056F 28 09       			JR		Z, L057A							;TO INPUT FILE REGARDLESS OF ITS NUMBER
1471   0571 ED 5B A4 08 			LD		DE, (L08A4)							;ELSE TEST THAT INPUT FILE NAME
1472   0575 B7          			OR		A									;IS THE SAME AS THE ONE IN THE FILE
1473   0576 ED 52       			SBC		HL, DE								;NUMBER WINDOW AND JUMP IF NOT
1474   0578 20 B7       			JR		NZ, L0531							;SELECTED FILE TO LOOK FOR NEXT FILE
1475   057A 2A 9A 08    L057A:		LD		HL, (L089A)							;TEST THAT OPTIONAL START ADDRESS
1476   057D 23          			INC		HL									;IS FFFF
1477   057E 7C          			LD		A, H
1478   057F B5          			OR		L
1479   0580 2B          			DEC		HL
1480   0581 20 03       			JR		NZ, L0586							;JUMP IF NOT, ELSE USE START ADDRESS
1481   0583 2A A6 08    			LD		HL, (L08A6)							;PROVIDED FROM THE TAPE
1482   0586             
1483   0586             ;THE MAIN LOAD/TEST ROUTINE STARTS HERE.
1484   0586             ;REFER TO THE DESCRIPTION OF THE BYTE COUNT AND BLOCK FORMATION AT THE OUTPUT SECTION
1485   0586             ;ROUTINE (SEE 508).
1486   0586             ;WHEN ALL THE BLOCKS HAVE BEEN INPUTTED AND THE ROUTINE JUMPS TO DISPLAY PASS/FAIL -Ld ON
1487   0586             ;THE LED DISPLAY.
1488   0586             ;HL IS POINTING TO THE PLACE IN MEMORY WHERE THE FILE WILL BE LOADED/TESTED.
1489   0586             
1490   0586 ED 4B A8 08 L0586:		LD		BC, (L08A8)							;PUT NUMBER OF BYTES INTO BC
1491   058A CD C9 05    			CALL	L05C9								;CALL B CONVERT AND TEST
1492   058D 20 05       			JR		NZ, L0594							;JUMP IF NOT ZERO AS THERE IS AT
1493   058F 78          			LD		A, B								;LEAST ONE FULL BLOCK TO LOAD/TEST
1494   0590 B7          			OR		A									;CHECK THAT B (FORMALLY C)=0
1495   0591 28 0A       			JR		Z, L059D							;JUMP IF SO AS ALL BYTES DONE
1496   0593 AF          			XOR		A									;ELSE SET ZERO FLAG TO REMEMBER
1497   0594 F5          L0594:		PUSH	AF									;SAVE FLAGS ON STACK
1498   0595 CD E3 05    			CALL	L05E3								;CALL INBLOCK
1499   0598 20 06       			JR		NZ, L05A0							;JUMP IF LOAD/TEST FAILED
1500   059A F1          			POP		AF									;RECOVER FLAGS
1501   059B 20 E9       			JR		NZ, L0586							;LOOP IF THERE MIGHT BE MORE
1502   059D AF          L059D:		XOR		A									;SET ZERO (SUCCESS) FLAG
1503   059E 18 01       			JR		L05A1								;JUMP TO END HANDLER
1504   05A0 D1          L05A0:		POP		DE									;CLEAN UP STACK
1505   05A1 20 11       L05A1:		JR		NZ, L05B4							;JUMP IF FAILED LOAD/TEST
1506   05A3             
1507   05A3             ;THE LOAD/TEST HAS PASSED. TEST HERE FOR OPTIONAL AUTO-GO AND FOR LOAD OPERATION (NO
1508   05A3             ;AUTO-GO FOR TEST OPERATIONS). START EXECUTION AT AUTO-GO ADDRESS IF REQUIRED.
1509   05A3             
1510   05A3 2A AA 08    			LD		HL, (L08AA)							;PUT OPTIONAL GO ADDRESS IN HL
1511   05A6 23          			INC		HL									;TEST FOR FFFF
1512   05A7 7C          			LD		A, H								;AND JUMP
1513   05A8 B5          			OR		L									;IF FFFF
1514   05A9 2B          			DEC		HL									;AS THERE
1515   05AA 28 07       			JR		Z, L05B3							;IS NO AUTO-GO
1516   05AC 3A 8A 08    			LD		A, (L088A)							;TEST THAT A LOAD OPERATION WAS
1517   05AF B7          			OR		A									;DONE
1518   05B0 20 01       			JR		NZ, L05B3							;SKIP JUMP IF IT WAS A TEST
1519   05B2 E9          			JP		(HL)								;ELSE AUTO START THE PROGRAM
1520   05B3             
1521   05B3             ;THE POST LOAD/TEST MENU DISPLAYS ARE SET UP HERE. IF THE LOAD/TEST FAILED THE ZERO FLAG
1522   05B3             ;IS CLEAR THE ROUTINE WILL POINT TO THE "FAIL" DISPLAY. OTHERWISE IT IS SET TO POINT TO
1523   05B3             ;THE "PASS" DISPLAY. THE DATA DISPLAY IS CALCULATED BY ADDING THE MENU ENTRY NUMBER OF
1524   05B3             ;THE JUST PERFORMED OPERATION X2, TO THE TABLE BASE OF POST LOAD/TEST DATA DISPLAYS.
1525   05B3             ;(THE MENU ENTRY NUMBER IS STILL THE SAME AS IT WAS WHEN "GO" WAS PRESS FROM THE MENU).
1526   05B3             
1527   05B3             .ORG 		$05B3
1528   05B3 AF          L05B3:		XOR		A
1529   05B4 11 68 07    L05B4:		LD		DE, L0768							;LOAD DE TO BASE OF DATA DISPLAY
1530   05B7 21 5C 07    L05B7:		LD		HL, L075C							;TABLE AND HL "FAIL" DISPLAY
1531   05BA 20 02       			JR		NZ, L05BE							;TABLE:
1532   05BC 2E 58       			LD		L, 0x58								;ADJUST HL TO PASS IF ZERO
1533   05BE 3A 8F 08    L05BE:		LD		A, (L088F)							;FIND WHAT OPERATION WAS PERFORMED
1534   05C1 07          			RLCA										;AND DOUBLE VALUE AND ADD TO HL TO
1535   05C2 83          			ADD		A, E								;POINT DE AT POST TAPE OPERATION
1536   05C3 5F          			LD		E, A								;DATA DISPLAY ENTRY (SEE 0768-0771)
1537   05C4 00          			NOP											;(FROM FIXED ERROR)
1538   05C5 AF          			XOR		A									;ZERO A
1539   05C6 C3 47 00    			JP		L0047								;JUMP TO SOFT MENU ENTRY
1540   05C9             
1541   05C9             ;THIS IS THE CONVERT/TEST B ROUTINE.
1542   05C9             ;THE VALUE IN B IS CONVERTED AND OUTPUTTED TO PORT 2.
1543   05C9             ;THEN B IS TESTED AND ONE OF THE FOLLOWING OPERATIONS IS PERFORMED. IF B=0 THEN C IS
1544   05C9             ;TRANSFERRED INTO B AND THE ZERO FLAG IS SET. IF B IS NOT 0 THEN B IS DECREMENTED, THE
1545   05C9             ;COUNT IS UP-DATED IN ITS BUFFER AND THE ZERO FLAG AND B IS CLEARED.
1546   05C9             
1547   05C9             .ORG		$05C9
1548   05C9 78          L05C9:		LD		A, B								;PUT HIGH BYTE OF COUNT IN A
1549   05CA E6 0F       			AND		0x0F								;MASK TO ONE DIGIT
1550   05CC 11 D0 07    			LD		DE, 07D0H							;POINT DE TO DISPLAY CODE TABLE
1551   05CF 83          			ADD		A, E								;ADD A
1552   05D0 5F          			LD		E, A
1553   05D1 1A          			LD		A, (DE)								;GET DISPLAY VALUE
1554   05D2 D3 02       			OUT		(DSEGMENT), A						;OUTPUT IT TO DISPLAY
1555   05D4 78          			LD		A, B								;TEST HIGH BYTE
1556   05D5 B7          			OR		A									;FOR ZERO
1557   05D6 28 09       			JR		Z, L05E1							;JUMP IF ZERO
1558   05D8 05          			DEC		B									;ELSE DECREASE COUNT BY ONE BLOCK
1559   05D9 ED 43 A8 08 			LD		(L08A8), BC							;STORE COUNT
1560   05DD 06 00       			LD		B, 0x00								;LOAD B FOR 256 BYTE OUTPUT BLOCK
1561   05DF B7          			OR		A									;CLEAR ZERO FLAG
1562   05E0 C9          			RET											;DONE
1563   05E1 41          L05E1:		LD		B, C								;PUT LAST BLOCK SIZE IN B
1564   05E2 C9          			RET											;DONE
1565   05E3             
1566   05E3             ;THIS BLOCK LOADS/TESTS THE BYTES IN FROM THE TAPE. THE NUMBER OF BYTES IS HELD IN B ON
1567   05E3             ;INPUT. AFTER THE SUB-ROUTINE THAT INPUTS A BYTE IS CALLED, A TEST AND JUMP IS DONE. THE
1568   05E3             ;TEST AND JUMP SELECT THE REQUIRED CODE TO PERFORM A LOAD OR TEST AS SELECTED FROM THE
1569   05E3             ;MENU BY THE USER. THE CHECK-SUM LOADED FROM THE TAPE HAS HAD ONE ADDED TO IT BY THE TAPE
1570   05E3             ;OUTPUT ROUTINE. THIS ADDED ONE IS REMOVED IN THIS ROUTINE BEFORE THE CHECK-SUM COMPARE
1571   05E3             ;IS DONE.
1572   05E3             
1573   05E3 3A 8A 08    L05E3:		LD		A, (L088A)							;GET CURRENT OPERATION
1574   05E6 4F          			LD		C, A								;SAVE IN C
1575   05E7 AF          L05E7:		XOR		A									;CLEAR A FOR CHECKSUM
1576   05E8 F5          L05E8:		PUSH	AF									;SAVE CHECKSUM
1577   05E9 CD 0B 06    			CALL	L060B								;CALL GET BYTE
1578   05EC CB 49       			BIT		1, C								;TEST FOR CURRENT OPERATION
1579   05EE 20 0E       			JR		NZ, L05FE							;JUMP IF A EITHER TEST
1580   05F0 73          			LD		(HL), E								;ELSE STORE INPUTTED BYTE IN MEMORY
1581   05F1 23          			INC		HL									;POINT TO NEXT LOCATION
1582   05F2 F1          L05F2:		POP		AF									;GET CHECKSUM
1583   05F3 83          L05F3:		ADD		A, E								;ADD TO NEW BYTE
1584   05F4 10 F2       			DJNZ	L05E8								;DO UNTIL BLOCK DONE
1585   05F6 F5          			PUSH	AF									;SAVE CHECKSUM
1586   05F7 CD 0B 06    			CALL	L060B								;GET TAPE CHECKSUM
1587   05FA F1          			POP		AF									;GET MEMORY CHECKSUM
1588   05FB 1D          			DEC		E									;CORRECT TAPE CHECKSUM
1589   05FC BB          			CP		E									;TEST CHECKSUMS TO SET FLAGS
1590   05FD C9          			RET											;BLOCK DONE
1591   05FE CB 41       L05FE:		BIT		0, C								;TEST FOR WHICH TEST
1592   0600 28 F0       			JR		Z, L05F2							;JUMP IF CHECKSUM ONLY TEST
1593   0602 F1          			POP		AF									;GET CHECKSUM
1594   0603 57          			LD		D, A								;SAVE IN D
1595   0604 7B          			LD		A, E								;GET INPUT BYTE
1596   0605 BE          			CP		(HL)								;TEST TO MEMORY
1597   0606 23          			INC		HL									;POINT TO NEXT LOCATION
1598   0607 7A          			LD		A, D								;PUT CHECKSUM BACK IN A
1599   0608 28 E9       			JR		Z, L05F3							;JUMP TO MAIN LOOP IF ALL OK
1600   060A C9          			RET											;RETURN IF ERROR
1601   060B             
1602   060B             ;THIS ROUTINE INPUTS A SINGLE BYTE.
1603   060B CD 18 06    L060B:		CALL	L0618								;GET START BIT
1604   060E 16 08       			LD		D, 0x08								;LOAD D FOR 8 BITS
1605   0610 CD 18 06    L0610:		CALL	L0618								;GET BIT
1606   0613 CB 1B       			RR		E									;PUT IT IN E
1607   0615 15          			DEC		D
1608   0616 20 F8       			JR		NZ, L0610							;DO FOR EIGHT BITS,
1609   0618             
1610   0618             ;THIS ROUTINE INPUTS A SINGLE BIT
1611   0618             ;THE STRUCTURE OF EACH BIT IS IMPORTANT TO UNDERSTAND AT THIS POINT. A LOGIC 0 IS REPRESENTED
1612   0618             ;BY 4 SHORT PERIODS FOLLOWED BY 1 LONG PERIOD AND A LOGIC 1 BY 2 SHORT PERIODS AND 2 LONG
1613   0618             ;PERIODS. THESE ARE HIGH SPEED FIGURES. FOR LOW SPEED THE ABOVE COUNTS ARE DOUBLED.
1614   0618             ;THE BITS ARE DECODED BY COUNTING THE RATIO OF SHORT PERIODS TO LONG PERIODS. A COMPLICATED
1615   0618             ;METHOD OF COUNTING IS USED TO RESULT IN THE BIT VALUE BEING REFLECTED IN BIT 7 OF L. THE
1616   0618             ;ROUTINE IS TERMINATED WHEN A SHORT PERIOD THAT FOLLOWED A LONG PERIOD IS DETECTED. THE
1617   0618             ;LONG PERIOD IS FLAGGED WITH BIT 0 OF H. THE "SHORT AFTER LONG" PERIOD USED FOR TERMINATION
1618   0618             ;IS ACTUALLY THE FIRST CELL OF THE NEXT BIT.
1619   0618             ;THE VALUE OF THE BIT INPUTTED IS THEN POT INTO THE CARRY FLAG.
1620   0618             
1621   0618 D9          L0618:		EXX											;SWAP REGISTERS
1622   0619 21 00 00    			LD		HL, 0x0000							;ZERO HL
1623   061C CD 30 06    L061C:		CALL	L0630								;CALL TO MEASURE PERIOD
1624   061F 38 06       			JR		C, L0627							;JUMP IF SHORT PERIOD
1625   0621 2D          			DEC		L									;SET HIGH ORDER BIT OF L TO ONES
1626   0622 2D          			DEC		L
1627   0623 CB C4       			SET		0, H								;REMEMBER THAT THE LONG PERIOD
1628   0625 18 F5       			JR		L061C								;HAS BEEN DETECTED: LOOP BACK
1629   0627 2C          L0627:		INC		L									;SHORT PERIOD SO ADD ONE TO L
1630   0628 CB 44       			BIT		0, H								;TEST FOR SHORT AFTER LONG PERIOD
1631   062A 28 F0       			JR		Z, L061C							;JUMP IF NOT
1632   062C CB 15       			RL		L									;END OF BIT: PUT BIT 7,L INTO
1633   062E D9          			EXX											;CARRY: SWAP REGISTERS
1634   062F C9          			RET											;INPUT BIT IN CARRY
1635   0630             
1636   0630             ;THIS ROUTINE INPUTS AND MEASURES THE PERIOD OF EACH TAPE CELL AND COMPARES IT TO THE
1637   0630             ;THRESHOLD BETWEEN A SHORT AND LONG PERIOD. THE CELL IS ALSO ECHOED ON THE TEC SPEAKER.
1638   0630             
1639   0630 11 00 00    L0630:		LD		DE, 0x0000							;ZERO DE FOR PERIOD MEASUREMENT
1640   0633 DB 03       L0633:		IN		A, (DATLATCH)						;TEST TAPE LEVEL
1641   0635 13          			INC		DE									;TIME PERIOD
1642   0636 17          			RLA											;PUT TAPE LEVEL INTO CARRY
1643   0637 30 FA       			JR		NC, L0633							;LOOP UNTIL IT GOES HIGH
1644   0639 AF          			XOR		A									;ECHO IT ON
1645   063A D3 01       			OUT		(DSCAN), A							;THE TEC SPEAKER
1646   063C DB 03       L063C:		IN		A, (DATLATCH)						;MEASURE SECOND HALF OF CYCLE
1647   063E 13          			INC		DE									;IN THE SAME FASHION AS ABOVE
1648   063F 17          			RLA
1649   0640 38 FA       			JR		C, L063C							;THIS TIME LOOP UNTIL TAPE LEVEL
1650   0642 3E 84       			LD		A, 0x84								;GOES LOW: ECHO IT ON TEC SPEAKER
1651   0644 D3 01       			OUT		(DSCAN), A
1652   0646 7B          			LD		A, E								;GET PERIOD MEASUREMENT
1653   0647 FE 1A       			CP		0x1A								;COMPARE IT TO THRESHOLD
1654   0649 C9          			RET											;TO SET FLAGS: DONE
1655   064A             
1656   064A             ;THIS ROUTINE OUTPUTS A BLOCK TO THE TAPE. THE NUMBER OF BYTES IS HELD IN B AND THE BLOCK
1657   064A             ;IS ADDRESS BY HL. AFTER ALL THE BYTES HAVE BEEN OUTPUTTED, THE CHECKSUM +1, WHICH WAS
1658   064A             ;ADDED OF AS EACH BYTE WAS OUTPUTTED, IS SENT TO THE TAPE.
1659   064A             
1660   064A 08          L064A:		EX		AF, AF'								;GET CHECKSUM IN A
1661   064B 5E          L064B:		LD		E, (HL)								;PUT BYTE TO BE OUTPUTTED IN E
1662   064C 83          			ADD		A, E								;ADD FOR CHECKSUM
1663   064D 08          			EX		AF, AF'								;SAVE IN ALTERNATE AF
1664   064E CD 57 06    			CALL	L0657								;CALL OUT BYTE
1665   0651 23          			INC		HL									;POINT TO NEXT BYTE
1666   0652 10 F6       			DJNZ	L064A
1667   0654 08          			EX		AF, AF'								;GET CHECKSUM
1668   0655 3C          			INC		A									;INCREASE IT BY ONE
1669   0656 5F          			LD		E, A								;PUT IT IN E
1670   0657             
1671   0657             ;THIS ROUTINE OUTPUTS A SINGLE BYTE IN E TO THE TAPE. THE FORMAT IS 1 START BIT, EIGHT
1672   0657             ;DATA BITS AND 1 STOP BIT.
1673   0657             
1674   0657 16 08       L0657:		LD		D, 0x08								;SET D FOR 8 BITS
1675   0659 B7          			OR		A									;CLEAR CARRY AND CALL OUTBIT
1676   065A CD 66 06    			CALL	L0666								;TO OUTPUT BINARY ZERO FOR START BIT
1677   065D CB 1B       L065D:		RR		E									;PUT FIRST BIT IN CARRY
1678   065F CD 66 06    			CALL	L0666								;CALL OUT BIT
1679   0662 15          			DEC		D
1680   0663 20 F8       			JR		NZ, L065D							;DO FOR 8 BITS
1681   0665 37          			SCF											;SET CARRY TO OUTPUT STOP BIT (1)
1682   0666             
1683   0666             ;THIS ROUTINE OUTPUTS A SINGLE BIT. IF THE CARRY IS SET, THEN A LOGIC 1 IS OUTPUTTED
1684   0666             ;OTHERWISE A LOGIC O.
1685   0666             ;A 1 IS REPRESENTED BY 2 SHORT AND 2 LONG PERIODS.
1686   0666             ;A 0 IS REPRESENTED BY 4 SHORT PERIODS AND 1 LONG PERIOD.
1687   0666             ;L IS LOADED WITH DOUBLE THE LOW SPEED CYCLE COUNT AS IT IS USED TO COUNT THE HALF CYCLES
1688   0666             ;IN THE TONE ROUTINE. IF THE HIGH SPEED SAVE IS SELECTED, THEN THE CYCLE COUNT WILL BE
1689   0666             ;HALVED IN THE TONE ROUTINE.
1690   0666             
1691   0666 D9          L0666:		EXX											;SWAP REGISTERS
1692   0667 26 00       			LD		H, 0x00								;ZERO H
1693   0669 38 09       			JR		C, L0674							;JUMP IF BINARY 1 IS TO BE OUTPUTTED
1694   066B 2E 10       			LD		L, 0x10								;LOAD L WITH HIGH TONE CYCLE COUNT
1695   066D CD 84 06    			CALL	L0684								;CALL HIGH TONE
1696   0670 2E 04       			LD		L, 0x04								;LOAD L WITH LOW TONE CYCLE COUNT
1697   0672 18 07       			JR		L067B								;JUMP TO LOW TONE
1698   0674 2E 08       L0674:		LD		L, 0x08								;LOAD L FOR HIGH TONE CYCLE COUNT
1699   0676 CD 84 06    			CALL	L0684								;FOR BINARY ONE: CALL HIGH TONE
1700   0679 2E 08       			LD		L, 0x08								;LOAD L FOR LOW TONE CYCLE COUNT
1701   067B CD 80 06    L067B:		CALL	L0680								;CALL LOW TONE
1702   067E D9          			EXX											;SWAP BACK REGISTERS
1703   067F C9          			RET											;DONE
1704   0680             
1705   0680             ;SET-UP FOR LOW TONE (LONG PERIOD)
1706   0680 0E 29       L0680:		LD		C, 0x29								;LOAD C FOR LOW TONE
1707   0682 18 02       			JR		L0686								;JUMP TO TONE ROUTINE
1708   0684             
1709   0684             ;SET-UP FOR HIGH TONE (SHORT PERIOD)
1710   0684 0E 11       L0684:		LD		C, 11H								;LOAD C FOR HIGH TONE
1711   0686             
1712   0686             ;TONE ROUTINE
1713   0686             ;TESTS FOR LOWSPEED SAVE. IF SO THEN IT HALVES THE CYCLE COUNT IN L.
1714   0686 3A 8F 08    L0686:		LD		A, (L088F)							;FIND WHICH SPEED
1715   0689 B7          			OR		A									;ZERO = HIGH SPEED
1716   068A 20 02       			JR		NZ, L068E							;JUMP IF LOW SPEED
1717   068C CB 3D       			SRL		L									;ELSE HALVE CYCLE COUNT
1718   068E 11 01 00    L068E:		LD		DE, 0001H							;
1719   0691 3E 84       			LD		A, 0x84								;TURN ON SPEAKER AND MIDDLE DISPLAY
1720   0693 D3 01       L0693:		OUT		(DSCAN), A							;
1721   0695 41          			LD		B, C								;
1722   0696 10 FE       L0696:		DJNZ	L0696								;PERIOD DELAY
1723   0698 EE 80       			XOR		0x80								;TOGGLE SPEAKER BIT
1724   069A ED 52       			SBC		HL, DE								;DECREASE CYCLE COUNT
1725   069C 20 F5       			JR		NZ, L0693							;JUMP IF NOT ALL CYCLES DONE
1726   069E C9          			RET											;ELSE RETURN
1727   069F             
1728   069F             ;THIS ROUTINE SETS UP THE "ERR-IN DISPLAY ON THE PERIMETER HANDLER.
1729   069F             .ORG		$069F
1730   069F 21 52 07    L069F:		LD		HL, L0752							;POINT HL TO "Err-In" DISPLAY
1731   06A2 11 00 08    			LD		DE, L0800							;CODE AND DE TO RAM DEstination
1732   06A5 01 06 00    			LD		BC, 0x0006							;BC(ount)
1733   06A8 ED B0       			LDIR										;MOVE BLOCK
1734   06AA C3 50 00    			JP		L0050								;JUNE TO SOFT PERIMETER ENTRY
1735   06AD             
1736   06AD             ;----END OF TAPE ROUTINES----
1737   06AD             ;THIS ROUTINE IS THE KEYBOARD READER/VALIDATER
1738   06AD             ;THE ACTION IS AS FOLLOWS:
1739   06AD             ;A SHORT LOOP LOOKS FOR A KEY PRESS. IF NO KEY IS PRESSED, THEN THE KEY PRESS BUFFER (0825)
1740   06AD             ;IS CLEARED THE ZERO AND THE CARRY FLAG CLEARED AND THE ROUTINE RETURNS.
1741   06AD             ;IF A KEY IS FOUND, THEN THE REMAINING LOOP COUNTS ARE WORKED OFF IN A DUMMY LOOP TO ENSURE
1742   06AD             ;EQUAL TIME IN EXECUTING THE ROUTINE.
1743   06AD             ;IF IT IS THE FIRST TIME.THAT THE KEY HAS BEEN DETECTED, THEN THE KEY PRESS FLAG WILL BE
1744   06AD             ;CLEAR. (IT WAS CLEARED BY THE MONITOR VARIABLES ON RESET). THE ROUTINE TESTS FOR THIS
1745   06AD             ;CONDITION AND IF TRUE THEN THE KEY IS ACCEPTED AS "VALID" AND FLAGGED BY A SET CARRY AND
1746   06AD             ;SET ZERO FLAG AND THE KEY PRESS FLAG IS SET TO INDICATE THE A KEY HAS BEEN DETECTED. THE
1747   06AD             ;INPUT IS THEN PLACED IN BOTH THE "I" REGISTER AND THE ACCUMULATOR. IF A KEY IS DETECTED
1748   06AD             ;BUT FOUND NOT TO BE VALID, I.E. IT HAS ALREADY BEEN DETECTED AND PROCESSED, THEN THE
1749   06AD             ;CARRY WILL BE SET BUT THE ZERO CLEARED. THIS ALLOWS THE AUTO KEY REPEAT SECTION TO KNOW
1750   06AD             ;THAT A KEY IS STILL BEING HELD DOWN. THE AUTO KEY REPEAT SECTION MAKE UP ITS OWN MIND
1751   06AD             ;WHETHER IT IS VALID OR NOT.
1752   06AD             
1753   06AD             .ORG		$06AD
1754   06AD             ;#IFDEF DA_KEYBOARD
1755   06AD             ;L06AD: IN A,(KEYBOARD)									;TEST FOR KEY PRESSED
1756   06AD             ;#ELSE
1757   06AD DB 03       L06AD:		IN		A, (DATLATCH)						;TEST FOR KEY PRESSED
1758   06AF             ;#ENDIF
1759   06AF CB 77       			BIT		6, A
1760   06B1             ;#IFDEF DA_ACTIVE_HIGH
1761   06B1             ;			JR		NZ,L06BB							;DA IS HIGH = KEYPRESS
1762   06B1             ;#ELSE
1763   06B1 28 08       			JR		Z, L06BB							;DA IS LOW = KEYPRESS
1764   06B3             ;#ENDIF
1765   06B3             
1766   06B3 10 F8       			DJNZ	L06AD								;LOOP LOOKING FOR KEY UNTIL B=0
1767   06B5 AF          L06B5:		XOR		A									;CLEAR KEY PRESS FLAG
1768   06B6 32 25 08    			LD		(L0825), A
1769   06B9 3D          			DEC		A									;SET A TO FF AND CLEAR ZERO FLAG
1770   06BA C9          L06BA:		RET											;DONE
1771   06BB 3A 25 08    L06BB:		LD		A, (L0825)							;GET KEY PRESS FLAG
1772   06BE B7          			OR		A									;TEST FOR ZERO
1773   06BF 20 00       			JR		NZ, L06C1							;DUMMY JUMP TO EQUALIZE TIME
1774   06C1 10 F8       L06C1:		DJNZ	L06BB								;FINISH LOOP
1775   06C3 37          			SCF											;SET CARRY
1776   06C4 20 F4       			JR		NZ, L06BA							;DUMMY JUMP TO RETURN
1777   06C6 3D          			DEC		A									;SET KEY PRESS FLAG TO FF
1778   06C7 32 25 08    			LD		(L0825), A
1779   06CA DB 00       L06CA:		IN		A, (KEYBOARD)						;GET INPUT KEY FROM ENCODER CHIP
1780   06CC E6 1F       			AND		0x1F								;MASK OFF UNUSED BITS
1781   06CE CB 7F       			BIT		7, A								;SET ZERO FLAG (THINK ABOUT IT!)
1782   06D0 37          			SCF											;SET CARRY
1783   06D1 32 20 08    			LD		(L0820), A							;STORE INPUT KEY
1784   06D4 C9          			RET											;DONE
1785   06D5             
1786   06D5             ;THIS ROUTINE IS CALLED ONCE ON EVERY HARD RESET. IT INITIALIZES THE LCD THEN TESTS THAT
1787   06D5             ;IT IS THERE (IT CANNOT DO IT THE OTHER WAY AROUND AS THE LCD NEEDS TO BE INITIALIZED
1788   06D5             ;BEFORE IT WILL RESPOND INTELLIGENTLY). IF THE LCD IS FITTED THEN THE ROUTINE WILL READ
1789   06D5             ;IN AN ASCII SPACE CHARACTER (20H) OR IF THE LCD IS NOT, JUNK FROM THE DATA BUSS.
1790   06D5             ;20H IS SUBTRACTED FROM WHATEVER IS READ IN AND THE RESULT IS STORED IN THE LCD ENABLE
1791   06D5             ;BUFFER. IF THE RESULT IS ZERO THEN THE LCD IS ENABLED. IT IS VITAL TO KNOW IF THE LCD IS
1792   06D5             ;FITTED, OTHERWISE THE ROUTINE WHICH READS THE BUSY FLAG MAY LOOP FOREVER.
1793   06D5             
1794   06D5 21 B5 07    L06D5:		LD		HL, L07B5							;POINT HL TO LCD INITIALIZE TABLE
1795   06D8 01 04 04    			LD		BC, 0x0404							;B=4 BYTES, C=PORT 4
1796   06DB 11 00 05    L06DB:		LD		DE, 0500H							;DELAY BETWEEN
1797   06DE 1B          L06DE:		DEC		DE									;EACH BYTE
1798   06DF 7A          			LD		A, D								;AS PER
1799   06E0 B3          			OR		E									;LCD MANUFACTER'S
1800   06E1 20 FB       			JR		NZ, L06DE							;INSTRUCTIONS
1801   06E3 ED A3       			OUTI										;OUTPUT (HL) TO (C). HL=HL=1,B=B-1
1802   06E5 20 F4       			JR		NZ, L06DB							;JUMP IF B NOT 0
1803   06E7 10 FE       L06E7:		DJNZ	L06E7								;SHORT DELAY
1804   06E9 DB 84       			IN		A, (LCDDATA)						;INPUT FROM LCD TO SEE IF IT'S THERE
1805   06EB D6 20       			SUB		0x20								;SUBTRACT ASCII SPACE, IF LCD FITTED
1806   06ED 32 21 08    			LD		(L0821), A							;RESULT WILL BE ZERO: STORE THIS IN
1807   06F0 C9          			RET											;LCD MASK: DONE
1808   06F1 FF          			RST		38H									;
1809   06F2 FF          			RST		38H									;
1810   06F3 FF          			RST		38H									;
1811   06F4 FF          			RST		38H									;
1812   06F5 FF          			RST		38H									;
1813   06F6 FF          			RST		38H									;
1814   06F7 FF          			RST		38H									;
1815   06F8 FF          			RST		38H									;
1816   06F9 FF          			RST		38H									;
1817   06FA FF          			RST		38H									;
1818   06FB FF          			RST		38H									;
1819   06FC FF          			RST		38H									;
1820   06FD FF          			RST		38H									;
1821   06FE FF          			RST		38H									;
1822   06FF FF          			RST		38H									;
1823   0700             
1824   0700             ;AT 0700 IS THE TAPE'S MENU JUMP TABLE.
1825   0700             .ORG		0x0700
1826   0700 C3 3F 04    			.DB		0xC3, 0x3F, 0x04					;HIGH SPEED SAVE
1827   0703 C3 3F 04    			.DB		0xC3, 0x3F, 0x04					;LOW SPEED SAVE
1828   0706 C3 3B 04    			.DB		0xC3, 0x3B, 0x04					;TEST BLOCK
1829   0709 C3 37 04    			.DB		0xC3, 0x37, 0x04					;TEST CHECKSUM
1830   070C C3 26 04    			.DB		0xC3, 0x26, 0x04					;LOAD TAPE
1831   070F             
1832   070F             
1833   070F             ;BELOW ARE THE JMON DEFAULT RESET VARIABLES (A ZERO IS THE ACTIVE RAM
1834   070F             ;STATE UNLESS OTHERWISE STATED). LOCATION
1835   070F             ;* DENOTES CONTROL BYTES DESIGNED TO BE USER ALTERED (IN RAM).
1836   070F             
1837   070F             .ORG		$070F
1838   070F 00          L070F:		.DB		0x00								;KEY BUFFER 0820
1839   0710 00          L0710:		.DB		0x00								;LCD ON/OFF FLAG 0821*
1840   0711 00          L0711:		.DB		0x00								;SOUND ON/OFF 0822*
1841   0712 FF          L0712:		.DB		0xFF								;GO AT ALTERNATE GO ADDRESS IF AA 0823*
1842   0713 FF          L0713:		.DB		0xFF								;STEPPER KEY CONTROL/TIMER 0824
1843   0714 00          L0714:		.DB		0x00								;KEY PRESSED FLAG 0825
1844   0715 FF          L0715:		.DB		0xFF								;UNUSED 0826
1845   0716 00          L0716:		.DB		0x00								;AUTO INCREMENT ON/OFF 0827*
1846   0717 00 0A       L0717:		.DB		0x00, 0x0A							;ALT GO ADDR/SOFT RESET EDIT LOCATION ($1000) 0828*
1847   0719 70          L0719:		.DB		0x70								;AUTO KEY REPEAT TIMER 082A
1848   071A 00          L071A:		.DB		0x00								;MONITOR CONTROL BYTE 082B
1849   071B 00 08       L071B:		.DB		0x00, 0x08							;DISPLAY BUFFER ADDRESS 082C*
1850   071D 00 09       L071D:		.DB		0x00, 0x09							;INITIAL EDITING LOCATION 082E
1851   071F             
1852   071F             ;BELOW ARE THE JMON INDIRECT JUMP ADDRESSES. THIS TABLE IS SHIFTED DOWN TO 0830 ON A HARD RESET.
1853   071F C3 D5 01    L071F:		.DB		0xC3, 0xD5, 0x01					;CONVERT HL TO DISPLAY CODE 0830
1854   0722 C3 DA 01    L0722:		.DB		0xC3, 0xDA, 0x01					;CONVERT A TO DISPLAY CODE 0833
1855   0725 C3 BA 01    L0725:		.DB		0xC3, 0xBA, 0x01					;LED SCAN ROUTINE 0836
1856   0728 C3 EE 01    L0728:		.DB		0xC3, 0xEE, 0x01					;SET LED DOTS 0839
1857   072B C3 24 02    L072B:		.DB		0xC3, 0x24, 0x02					;RESET TONES 083C
1858   072E C3 27 02    L072E:		.DB		0xC3, 0x27, 0x02					;TONE 083F
1859   0731 C3 81 01    L0731:		.DB		0xC3, 0x81, 0x01					;SCAN/KEY/LCD/PATCH LOOP 0842
1860   0734 C3 B2 00    L0734:		.DB		0xC3, 0xB2, 0x00					;SOFT JMON ENTRY L0845
1861   0737 C3 3C 02    L0737:		.DB		0xC3, 0x3C, 0x02					;LCD ROUTINE 0848
1862   073A             
1863   073A             ;BELOW ARE THE DISPLAY TABLES FOR THE TAPE'S MENU ADDRESS DISPLAYS AND
1864   073A             ;THE "ERR-IN" DISPLAY THAT IS SUPERIMPOSED OVER THE PERIMETER HANDLER.
1865   073A A7 6F EA C7 L073A:		.DB		0xA7, 0x6F, 0xEA, 0xC7				;"SAVE"
1866   073E A7 6F EA C7 L073E:		.DB		0xA7, 0x6F, 0xEA, 0xC7				;"SAVE"
1867   0742 C6 C7 A7 C6 L0742:		.DB		0xC6, 0xC7, 0xA7, 0xC6				;"TEST"
1868   0746 C6 C7 A7 C6 L0746:		.DB		0xC6, 0xC7, 0xA7, 0xC6				;"TEST"
1869   074A C2 EB 6F EC L074A:		.DB		0xC2, 0xEB, 0x6F, 0xEC				;"LOAD"
1870   074E 04 C7 64 EC L074E:		.DB		0x04, 0xC7, 0x64, 0xEC				;"-End"
1871   0752 04 C7 44 44 L0752:		.DB		0x04, 0xC7, 0x44, 0x44, 0x28, 0x64	;"-Err In"
1871   0756 28 64       
1872   0758 4F 6F A7 A7 L0758:		.DB		0x4F, 0x6F, 0xA7, 0xA7				;"PASS"
1873   075C 47 6F 28 C2 L075C:		.DB		0x47, 0x6F, 0x28, 0xC2				;"FAIL"
1874   0760             
1875   0760             ;BELOW ARE THE TAPE'S MENU DATA DISPLAYS.
1876   0760 04 6E       L0760:		.DB		0x04, 0x6E							;"-H"
1877   0762 04 C2       L0762:		.DB		0x04, 0xC2							;"-L"
1878   0764 E6 C2       L0764:		.DB		0xE6, 0xC2							;"bL"
1879   0766 C3 A7       L0766:		.DB		0xC3, 0xA7							;"CS"
1880   0768 04 C6       L0768:		.DB		0x04, 0xC6							;"-t"
1881   076A 04 A7       L076A:		.DB		0x04, 0xA7
1882   076C C6 E6       L076C:		.DB		0xC6, 0xE6							;"tb"
1883   076E C3 A7       L076E:		.DB		0xC3, 0xA7							;"CS"
1884   0770 C2 EC       L0770:		.DB		0xC2, 0xEC							;"Ld"
1885   0772 FF FF FF FF L0772:		.DB		0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF		;(UNUSED)
1885   0776 FF FF FF FF 
1885   077A FF FF       
1886   077C             
1887   077C             ;BELOW IS THE PERIMETER HANDLER COMMAND STRING FOR THE TAPE SOFTWARE.
1888   077C 00 FF C6 07 L077C		.DB 	0x00,0xFF,0xC6,0x07,0x99,0x08,0x00,0x03
1888   0780 99 08 00 03 
1889   0784             ;(FF FF; THE JUMP ADDRESS FOR THE TAPE ROUTINES IS SUPPLIED BY THE POST MENU SET-UP ROUTINES, SEE 0426-044E).
1890   0784             
1891   0784             ;0786 - 0788 FF ;(RESERVED FOR COMMAND STRING EXPANSION).
1892   0784 FF FF FF FF L0786		.DB		0xFF,0xFF,0xFF,0xFF,0xFF
1892   0788 FF          
1893   0789             
1894   0789             ;BELOW IS THE TAPE'S MENU DRIVER COMMAND STRING.
1895   0789 FF FF 00 04 L0789		.DB		0xFF,0xFF,0x00,0x04,0x00,0x07,0x3A,0x07,0x60,0x07
1895   078D 00 07 3A 07 
1895   0791 60 07       
1896   0793             
1897   0793             ;TAPE'S SOFTWARE MENU DATA KEY HANDLER ROUTINE JUMP VECTOR (A RETURN INSTRUCTION).
1898   0793 C9          L0793		.DB		0xC9
1899   0794             
1900   0794             ;BELOW IS THE STEPPERS DATA DISPLAY CODES.
1901   0794             .ORG		$0794
1902   0794 4F C3       L0794:		.DB		0x4F, 0xC3							;"PC"
1903   0796 6F 47       L0796:		.DB		0x6F, 0x47							;"AF"
1904   0798 E6 C3       L0798:		.DB		0xE6, 0xC3							;"BC"
1905   079A EC C7       L079A:		.DB		0xEC, 0xC7							;"DE"
1906   079C 6E C2       L079C:		.DB		0x6E, 0xC2							;"HL"
1907   079E 28 6E       L079E:		.DB		0x28, 0x6E							;"IX"
1908   07A0 28 AE       L07A0:		.DB		0x28, 0xAE							;"IY"
1909   07A2 7F 57       L07A2:		.DB		0x7F, 0x57							;“AF'"
1910   07A4 F6 D3       L07A4:		.DB		0xF6, 0xD3							;"BC'"
1911   07A6 FC D7       L07A6:		.DB		0xFC, 0xD7							;"DE'"
1912   07A8 7E D2       L07A8:		.DB		0x7E, 0xD2							;"HL'"
1913   07AA A7 4F       L07AA:		.DB		0xA7, 0x4F							;"SP"
1914   07AC FF          L07AC:		.DB		0xFF								;(UNUSED)
1915   07AD             
1916   07AD             ;START OF STAGGERED TABLE OF JMON MODE WORDS FOR LCD
1917   07AD             .ORG		$07AD
1918   07AD 44 61 74 61 L07AD:		.DB		0x44, 0x61, 0x74, 0x61				;"Data"
1919   07B1 41 64 64 72 L07B1:		.DB		0x41, 0x64, 0x64, 0x72				;"Addr"
1920   07B5             
1921   07B5             ;LCD INITIALIZATION CODES
1922   07B5             .ORG		$07B5
1923   07B5 38 01 06 0C L07B5:		.DB		0x38, 0x01, 0x06, 0x0C
1924   07B9             
1925   07B9             ;THE REST OF THE JMON MODE WORD TABLE FOR LCD
1926   07B9             .ORG		$07B9
1927   07B9 46 73 2D    L07B9:		.DB		0x46, 0x73, 0x2D					;"Fs-"
1928   07BC FF          			.DB		0xFF
1929   07BD             
1930   07BD             ;ADDRESS TABLE OF THE LCD PROMPT LOCATIONS.
1931   07BD             .ORG		$07BD
1932   07BD 84 87 8A 8D L07BD:		.DB		0x84, 0x87, 0x8A, 0x8D, 0xC4, 0xC7, 0xCA, 0xCD, 0x80
1932   07C1 C4 C7 CA CD 
1932   07C5 80          
1933   07C6             
1934   07C6             ;TAPE'S PERIMETER HANDLER DATA DISPLAYS
1935   07C6             .ORG		$07C6
1936   07C6 04 47       L07C6:		.DB		0x04, 0x47							;"-F"
1937   07C8 04 A7       			.DB		0x04, 0xA7							;"-S"
1938   07CA 04 C7       			.DB		0x04, 0xC7							;u_Ett
1939   07CC 04 E3       			.DB		0x04, 0xE3
1940   07CE FF FF       			.DB		0xFF, 0xFF							;(UNUSED)
1941   07D0             
1942   07D0             ;BELOW ARE THE DISPLAY CODE EQUIVALENTS OF THE HEX DIGITS 0 TO F LISTED IN ASCENDING ORDER.
1943   07D0             .ORG		$07D0
1944   07D0 EB 28 CD AD L07D0:		.DB		0xEB, 0x28, 0xCD, 0xAD, 0x2E, 0xA7, 0xE7, 0x29, 0xEF, 0x2F, 0x6F, 0xE6, 0xC3, 0xEC
1944   07D4 2E A7 E7 29 
1944   07D8 EF 2F 6F E6 
1944   07DC C3 EC       
1945   07DE C7 47       L07DE:		.DB		0xC7, 0x47						;MJ: Split out to allow for a Label that is used
1946   07E0             
1947   07E0             ;FINALLY AT 07E0 IS THE FUNCTION-1 AND SHIFT JUMP ADDRESSES.
1948   07E0             .ORG		$07E0
1949   07E0 D2 03 E3 02 L07E0:		.DB		0xD2, 0x03, 0xE3, 0x02, 0x5E, 0x00, 0xFF, 0xFF, 0xD3, 0x02, 0xAE, 0x00, 0xDE, 0x02, 0x41, 0x03
1949   07E4 5E 00 FF FF 
1949   07E8 D3 02 AE 00 
1949   07EC DE 02 41 03 
1950   07F0 ED 02 E8 02 			.DB		0xED, 0x02, 0xE8, 0x02, 0xF2, 0x02, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF
1950   07F4 F2 02 FF FF 
1950   07F8 FF FF FF FF 
1950   07FC FF FF FF FF 
1951   0800             
Number of errors = 0
